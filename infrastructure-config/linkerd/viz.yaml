---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU82YTB1SWdBanVxTkVicDd2OTdQK2t3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBMU1qRXlNREl4TkRWYQpGdzB5TXpBMU1qRXlNREl4TkRWYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNzbjNpUFJML3hCNnBaZHpOeFJDOEUKQStueHBBRXgzdUtsRmIwdHMxNHhod29wOCtVbGFEaTN0Y2dXa1Jrb3g1ZC9CV1dzWUh1SFJjRnRnWER6NzB6TgpxMURkNjZ0eWE3R08zL3k0aDNpRmNuM2lleVMrNlJFdVJkbVQ4ZEd0UldHenBpbjVZOXlCdmxFSUFOYTBJd3piCkUzR2VsRERWajZWSlVobnQzaE9sZ0dJYm5QY3Nhb2p4TEpUUEdHUHR2eE1SeTJhRVBYUmR6SW54TWpwWmlQL20KV0t2MzJxUkVab292elJTL3liQ2NwbTlEZ0VGME9lM1V1Z3Iwa3BHUG8vT0Y4bllCdVhDNmwyTjVFNi90T3Y4OQpaV2phV2JaUUZTS1BpcFZTNWdtM0pDSWpPZWUxMnBadVJ4NjQ1ai9pOE9zWjJQcENIZ21wVVZ2OWI3SzFiVWxICkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ0NEWlFnWFJsYXFkMW1WeWR2aUZMNGRxYWRjenhlCno1dUxGVVI5cGFsRHl4Mm4vWFRqRzdyenVIVFlSRkJ2dEM5Mm9Bdmw2ZCtCcUFDRzBpTzdrU2ZnMHlxWlNYVGoKaVROZWVnTDBrdXVxTzZOZ2grREVwUnZ0cWZxZUdDcjRYRjJnWWp1S2FiMVFBVHBvUGQ1bUFiV0hzYVIzVXN2cgp0R2l1T1BneVNaMU1qN3FrSHJ0WmpYSDh4WDdjSVFJWm01d2dBTGIrcWZhVHhqVjAvUC9uMzBheWZGMEdjeU5KCmFyVFRjZFFoZ3RtcjhNVUdZMHA5SkFYR0RFUjk4TUJybCtjdVgwNU1vaVhWZVVlUUc5YXMzSlQ0SmlEOTFBWEoKZXNFSlNvR3RPZGMveWFndFdwenlPSzBRdUFucGVyZng0azdEaEoxeURpMlNiZXFueEkrSWVtRnEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcko5NGowUy84UWVxV1hjemNVUXZCQVBwOGFRQk1kN2lwUlc5TGJOZU1ZY0tLZlBsCkpXZzR0N1hJRnBFWktNZVhmd1ZsckdCN2gwWEJiWUZ3OCs5TXphdFEzZXVyY211eGp0Lzh1SWQ0aFhKOTRuc2sKdnVrUkxrWFprL0hSclVWaHM2WXArV1BjZ2I1UkNBRFd0Q01NMnhOeG5wUXcxWStsU1ZJWjdkNFRwWUJpRzV6MwpMR3FJOFN5VXp4aGo3YjhURWN0bWhEMTBYY3lKOFRJNldZai81bGlyOTlxa1JHYUtMODBVdjhtd25LWnZRNEJCCmREbnQxTG9LOUpLUmo2UHpoZkoyQWJsd3VwZGplUk92N1RyL1BXVm8ybG0yVUJVaWo0cVZVdVlKdHlRaUl6bm4KdGRxV2JrY2V1T1kvNHZEckdkajZRaDRKcVZGYi9XK3l0VzFKUndJREFRQUJBb0lCQUJtL1EyMGpGUG52YWNJawpYR0RsaVptd3Q4RVo5QytyRGVVUHBBTGdBUW1rR2FqK1BzeGdpaTBraU82TXY5THNTalZnNmJSWFE3Vitld1pKClN6Nm5ENjZSZ2VOSDFtK2Zqb0UvK1dMUW1mSlZqRjh1Zk9HWXc3NUNIdHpKTWJ3RllEZzZiWUpNR2NTa1RWUEQKUkVMa0EzUGRwNUcraXJZZjBjaG8zWU0wSDN3TXRqeFlRUklTbks4TWNwOGN2RUcycmpaOVJGWlNPYVhpZ09CSQpVM2x0RXZMWVRqYmNGWC9lVkVvd0xaS1FncFc1eE92ZjNaRUZEN1EyaW95bkRnQ3dOcnEzbnA5L2JpclRsTUtBCmV2VGI5c0dkblR4aHQzRTFSSG1MczVzSE50SlBodG9NaWFFTEhJdUkwUmJhL1BjTXgra2hrNWRZNlBoMkk5VWsKVTVxQjEva0NnWUVBeExwRDArR1V0VmhEMjFtNC9RTFNOaFlLVFhqMzBpQmZpcU5ZU1hPeUFLTCtMS1ZpWW4wRQpwZ2g4c1I1STY0MmF0dkFhdU1nNmtnNVNBUG1jb1ZNZU9kVjg1aUlxREVxTFR0T0F3cU9TTStSaWRxdHQvVktpCjlwT0VBMkpzY0U4ZnVVeVFZdEFLY3RiZ1pDWFBGTU9Ud1ZhRlc3SCtGWmtHczlEakpJWTdQblVDZ1lFQTRLSC8KSkFSZVIycERONHVMcmF0VzRSYzIyV280TXhCTU51K0ozRkhOeE1qY0ZJdFJuazZHQUlkMy9sMGU1WWI3dWtYcQpLOEZncjEwcjZpZkJNOGtGcGlDeWZ0amhabEVMc3RxWjFEQ0ZEbG5RVE1Xa0p1aUhRekZyd3V1Yng3aXJ4K1AwCnhQRUFyYkpYTHFkcFRYdFk1VE9xY2EwMVBLYUpXS2Z5MjNra2FVc0NnWUVBaXd1Zi96VVV0MndRWWd3emZOaXUKblQzTXdGODh3YzdSMkpxRlB6MC8xY1ZlWTAzdGtQRU9CUkJBbWF0dkhOWTBRUkxKd0VyOVl0Z3VTN1FoYWNEbQp2emZPbEpZWEpDTFgvYm50NnlSVHBNdktjRmZRWU5rMGg1VlNIRlpIa01YTUJWdEJQaVlQRElZbGlZTlRyemhnCnlha09qdlhxUVhlc1RoSFpTYXA2V3pVQ2dZQSsyN1lNdXhneXZiNlBkWUlobC9lWXh5azNENjBvUk9BKzR5cmQKdHhwd2ZaQndRMGdVbDM2UitWYVBuRGxBRzFTbm5GYlo1YVFMam5QeWN5dHlOVWRhWkgzdVZ2eEQ2RnZ3c1pFbwpPbWVSUzNxcGNRanRSbFpMYkRIdWVvVytEcVFyTEZQYkpHRi9PWStCNDZEbzZLSklpUHVpRWNqNjd0TXlOdFVUCnEwT1FId0tCZ0VJcmN2UVhnbkU4cmRaT2pwakRtdFdrRytIendlNDdvL2RKeWx3c3BrUGV0OStrM3E1cmhBTGMKb0NybUowZG1Gd0tMTFB6ZDFBTTQ1eFRvQkxPcnhNUWd3djJheHNibkZaeGdrbGhxZ29FNmpGT2ZwSjFQOUZvaApHNWFLUGZEdXlLdFVJRmRGQkszRjhXWHJ6UHhmMlA5dnlycEkwWkNYM3VIcnpHUmcwSERMCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU82YTB1SWdBanVxTkVicDd2OTdQK2t3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBMU1qRXlNREl4TkRWYQpGdzB5TXpBMU1qRXlNREl4TkRWYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNzbjNpUFJML3hCNnBaZHpOeFJDOEUKQStueHBBRXgzdUtsRmIwdHMxNHhod29wOCtVbGFEaTN0Y2dXa1Jrb3g1ZC9CV1dzWUh1SFJjRnRnWER6NzB6TgpxMURkNjZ0eWE3R08zL3k0aDNpRmNuM2lleVMrNlJFdVJkbVQ4ZEd0UldHenBpbjVZOXlCdmxFSUFOYTBJd3piCkUzR2VsRERWajZWSlVobnQzaE9sZ0dJYm5QY3Nhb2p4TEpUUEdHUHR2eE1SeTJhRVBYUmR6SW54TWpwWmlQL20KV0t2MzJxUkVab292elJTL3liQ2NwbTlEZ0VGME9lM1V1Z3Iwa3BHUG8vT0Y4bllCdVhDNmwyTjVFNi90T3Y4OQpaV2phV2JaUUZTS1BpcFZTNWdtM0pDSWpPZWUxMnBadVJ4NjQ1ai9pOE9zWjJQcENIZ21wVVZ2OWI3SzFiVWxICkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ0NEWlFnWFJsYXFkMW1WeWR2aUZMNGRxYWRjenhlCno1dUxGVVI5cGFsRHl4Mm4vWFRqRzdyenVIVFlSRkJ2dEM5Mm9Bdmw2ZCtCcUFDRzBpTzdrU2ZnMHlxWlNYVGoKaVROZWVnTDBrdXVxTzZOZ2grREVwUnZ0cWZxZUdDcjRYRjJnWWp1S2FiMVFBVHBvUGQ1bUFiV0hzYVIzVXN2cgp0R2l1T1BneVNaMU1qN3FrSHJ0WmpYSDh4WDdjSVFJWm01d2dBTGIrcWZhVHhqVjAvUC9uMzBheWZGMEdjeU5KCmFyVFRjZFFoZ3RtcjhNVUdZMHA5SkFYR0RFUjk4TUJybCtjdVgwNU1vaVhWZVVlUUc5YXMzSlQ0SmlEOTFBWEoKZXNFSlNvR3RPZGMveWFndFdwenlPSzBRdUFucGVyZng0azdEaEoxeURpMlNiZXFueEkrSWVtRnEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: admin
  client:
    # for kubelet probes and prometheus scraping
    unauthenticated: true

---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: proxy-admin
  client:
    # for kubelet probes
    unauthenticated: true

---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: metrics-api
  client:
    meshTLS:
      serviceAccounts:
      - name: web
      - name: prometheus
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
    [log]
    mode = console
    [log.console]
    format = text
    level = info
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: grafana
  client:
    # web, prometheus and the kubelet probes
    unauthenticated: true
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 54c893dde68db53fc96c6c90d697b452cea14903514e241ec54fe22d3c923478
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: tap-api
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRSTFrMTN3STVDeEQ2T0VlZU10N0xuekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURVeQpNVEl3TWpFME5sb1hEVEl6TURVeU1USXdNakUwTmxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1BTHZvWDF5aWdiZUY1bVZYK0VRVFJJbXJ5M1dIN253QmlqYTVBay9Hc3UvRWxBRVd0TnZzYkh2YW5KUVh5dQp3YnY4ZHZHL1FkclJDMW8wLy8yeEpPL3VXVlQ5NnpiME02eHlpNEdTOXByWlVqRkg1NTV5WkNvdlkvbHk1akxUClAwMUJoMDhTOTV1YWdvNS9FczNrY1B3TTdrZ3lTYUZuOWlPb0JMbWZMV2V6b3owQ3ErbXFyNU55QjZGK1VvdVoKSU5SVnFVRXp3dmF6MlBqbXRPN0wwL3JoZ05FUFNZeml4U0xXZHEzOUFGakc0ZkJMa2R5ZGhCdGxORFAwdkNudwpLR2Z6WDdUUFN2QVdVOVdYS0h0QlVoK1lZVUpiQ3lESVJoNzl3am4zUXNENkRPZmpMYjcveG13b09ucWhncU03CkxuZFVyN2gySGhtOGVZNlVOem02bkpFQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRDZPbG1nejVPV2RqV1FGa3BnZ01udWJwQ0c2aHJWdm9ZeCsrZGJ3c0tjd2dvS2dmV3k4bXgxTGY0ak4KVHNNMlNrSlYyMDJWdXFBWDZ0L3ZNand2MHpmcWZzcVdTQ0pjVFdVbjhGK1RsYVZRbklzRExXTVg3YnJzZVZDcwovbU1RaFYzb1EvRVdjbFlBTnVJOHQ3YkNTV1EvUUZBYXd6QWxsSEtxQmt6WHdvNytHZFFPdWdJNEp3UGcxb0RNCndsRUtOOHh3bW5FQ2g5UTU5RDl4eDg3Y2RMNElsR1krcExtUlF6YUZlUVNjOVpVQzZWNHVmaDAwNEs1bEF1WUIKU0dyc01MTGR0Y2cxWmY1Z3h0MGhUNEhzcDl5WVFMQ24zeHhmakkwN1ZLdlhJcVFWaUVZc3lVK0tTblhzeGQvNgpDV3dKNGVSdlE5V09ieDcxNUFLQksybTYrQzQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd0F1K2hmWEtLQnQ0WG1aVmY0UkJORWlhdkxkWWZ1ZkFHS05ya0NUOGF5NzhTVUFSCmEwMit4c2U5cWNsQmZLN0J1L3gyOGI5QjJ0RUxXalQvL2JFazcrNVpWUDNyTnZRenJIS0xnWkwybXRsU01VZm4Kbm5Ka0tpOWorWExtTXRNL1RVR0hUeEwzbTVxQ2puOFN6ZVJ3L0F6dVNESkpvV2YySTZnRXVaOHRaN09qUFFLcgo2YXF2azNJSG9YNVNpNWtnMUZXcFFUUEM5clBZK09hMDdzdlQrdUdBMFE5SmpPTEZJdFoycmYwQVdNYmg4RXVSCjNKMkVHMlUwTS9TOEtmQW9aL05mdE05SzhCWlQxWmNvZTBGU0g1aGhRbHNMSU1oR0h2M0NPZmRDd1BvTTUrTXQKdnYvR2JDZzZlcUdDb3pzdWQxU3Z1SFllR2J4NWpwUTNPYnFja1FJREFRQUJBb0lCQURMK2ExYXl6ejBiSGpraQp2eTBlOXhsazlnR0tSYXRjNmpzZ21aMHExUU80OURDWEhJajdtZDY2aHZnZ2dvMFM4a3B5WFRzUDUvS3NjM0UrCmhZTGRtTXRFNU4rV2xQQ0FvMy8wNG1wRGxjdkVUUGpjK1BtdnNqMHBYRWlPWStXM0JpWURjbVJpeXZDOGRGSlcKRjY0b0xJQWhCdHlRemRCWUJKbXZNYUlBVEZRdWZ5VkxWTW90Q1NSRlFQcW1hWWw2dW9heEtpR2VacDc1Rmw5dgo3S29jcUM1eWhZSDlyODN2ZElxZGdaM3ArUVpqb0dIa3FETUpjU3dienZjVUxuNEN2bVNhcTJTMG1YNGJJL2UvCklSZkVZNTJZd0hVQnc3YjBkRmNhL2xnZG1GY0ZsRUYxM0xKMGhOby9STHNramZNdGd1UHh0b0NoRGtWQ2N6eC8KMUlFZC9xa0NnWUVBNVgxZG1LRmtTRVhYenVrV1EyWUxOSm5kZWxaRDJTYjlWQjlPK2liN0NwOTZmcDVwUWx0OQpLVVdMWnBSNnRoY1BWbEM5SGVSTDZWTEdXU1JwbEJTeHlkbUEyR2dIQjZqWTJoVUVDOFFOMXNjd21aZ1JRYnhVCkhyUEFhNU0yeWYwZDBsTTJIeS9pZi9Ca29XUTJJL01USWRqQXI2bzNTclRDK1d5MkVSUVNnTmNDZ1lFQTFqc1EKRFZpcVk2SzIxS2hvOEdjRG84VlE1SllpcVo4NjNranJ1a2VpWWthZXc0V0t1a0tlbnhtTWIxak5Melp3VlVJMwpBbjZFY1U0dWVrZHRweGd5Y3BLckl1Umt1Yi82YzQrREg2eU8ySTNjRGZVcDZZS3lhODFJZjFyZnB2cFNSN2VSCmt4SVZNY25nbjM3WktBYXh0cUNSNTVuYjNkMHVrZ0hBdGx2OTJOY0NnWUVBZ2ZOdXA3cGtaZ1Nld3Z6OGJXZ0EKV21YeW80N3IxckNjYlNGWmdJL0lRbWl5WGJib1Zmb21zdE05ci9YT1V3UlYzQVBXUTNIK2huNG44VnlNS0oxYgpXN2k5bkUyMEJXTllnSTI3LzhtaUtJZ2MvaXk5UU9NYkkxT1lWNUpDU1RqNnhSbjNvTXRsMEJyWmNRYWxIZEJNCmVqTWFVWjdxdG5RTG9HQXQ3UmZYcm5zQ2dZQmpNbElLZkFYWndOdzd1QWR2V2FQYnoxL1htSlZRU1lTdXJNRksKTGlWSXNENlBkbVI0UHFUSU1zSk9SS1l0dUYxbmZST1B1aG1GaFpnTDBzczVWZ0QyQUdmeDdpT2R4d0VuUlVxSAovaFRldlVFcHpWMnMzSEhWYk9hbTRlTXhwRE01Tmd6WU5zVk5tcGJDQTdCMTBqT3p4c0lJcGJ1akRlbWtmZDlJCkVXeUhYUUtCZ1FDRjNYMG8xRnUzR3FoZU8wcVBBd0ZKQVBHVDdNaUJlZCt6MEtLSUtNM0x0ZXlHZ1BPdjBPcHkKckdodWxxVkRFM3lRbmJuMU90a0xVcFZodVRRc1RGcklMUHBrSVllSFd1Szh3UjdJT1Vpd1N1Mzdzb2djQXUwawoxcU1haUxWOVBmOTdDaEdZQVFuN3lXVG00ZzRPVVJ6QmtwbFhTbmxCNW9tKzgzTHFpamlrOEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRSTFrMTN3STVDeEQ2T0VlZU10N0xuekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURVeQpNVEl3TWpFME5sb1hEVEl6TURVeU1USXdNakUwTmxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1BTHZvWDF5aWdiZUY1bVZYK0VRVFJJbXJ5M1dIN253QmlqYTVBay9Hc3UvRWxBRVd0TnZzYkh2YW5KUVh5dQp3YnY4ZHZHL1FkclJDMW8wLy8yeEpPL3VXVlQ5NnpiME02eHlpNEdTOXByWlVqRkg1NTV5WkNvdlkvbHk1akxUClAwMUJoMDhTOTV1YWdvNS9FczNrY1B3TTdrZ3lTYUZuOWlPb0JMbWZMV2V6b3owQ3ErbXFyNU55QjZGK1VvdVoKSU5SVnFVRXp3dmF6MlBqbXRPN0wwL3JoZ05FUFNZeml4U0xXZHEzOUFGakc0ZkJMa2R5ZGhCdGxORFAwdkNudwpLR2Z6WDdUUFN2QVdVOVdYS0h0QlVoK1lZVUpiQ3lESVJoNzl3am4zUXNENkRPZmpMYjcveG13b09ucWhncU03CkxuZFVyN2gySGhtOGVZNlVOem02bkpFQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRDZPbG1nejVPV2RqV1FGa3BnZ01udWJwQ0c2aHJWdm9ZeCsrZGJ3c0tjd2dvS2dmV3k4bXgxTGY0ak4KVHNNMlNrSlYyMDJWdXFBWDZ0L3ZNand2MHpmcWZzcVdTQ0pjVFdVbjhGK1RsYVZRbklzRExXTVg3YnJzZVZDcwovbU1RaFYzb1EvRVdjbFlBTnVJOHQ3YkNTV1EvUUZBYXd6QWxsSEtxQmt6WHdvNytHZFFPdWdJNEp3UGcxb0RNCndsRUtOOHh3bW5FQ2g5UTU5RDl4eDg3Y2RMNElsR1krcExtUlF6YUZlUVNjOVpVQzZWNHVmaDAwNEs1bEF1WUIKU0dyc01MTGR0Y2cxWmY1Z3h0MGhUNEhzcDl5WVFMQ24zeHhmakkwN1ZLdlhJcVFWaUVZc3lVK0tTblhzeGQvNgpDV3dKNGVSdlE5V09ieDcxNUFLQksybTYrQzQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 3d33c536b7a71a9485be2fdef30b47cd3fc41cd4d49d4b1540de0a05110d02ca
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: tap-injector-webhook
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: grafana.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: GET /api/annotations
    condition:
      method: GET
      pathRegex: /api/annotations
  - name: GET /api/dashboards/tags
    condition:
      method: GET
      pathRegex: /api/dashboards/tags
  - name: GET /api/dashboards/uid/{uid}
    condition:
      method: GET
      pathRegex: /api/dashboards/uid/.*
  - name: GET /api/dashboard/{dashboard}
    condition:
      method: GET
      pathRegex: /api/dashboard/.*
  - name: GET /api/datasources/proxy/1/api/v1/series
    condition:
      method: GET
      pathRegex: /api/datasources/proxy/1/api/v1/series
  - name: GET /api/datasources/proxy/1/api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/datasources/proxy/1/api/v1/query_range
  - name: GET /api/search
    condition:
      method: GET
      pathRegex: /api/search
  - name: GET /d/{uid}/{dashboard-name}
    condition:
      method: GET
      pathRegex: /d/[^/]*/.*
  - name: GET /public/build/{style}.css
    condition:
      method: GET
      pathRegex: /public/build/.*\.css
  - name: GET /public/fonts/{font}
    condition:
      method: GET
      pathRegex: /public/fonts/.*
  - name: GET /public/img/{img}
    condition:
      method: GET
      pathRegex: /public/img/.*
