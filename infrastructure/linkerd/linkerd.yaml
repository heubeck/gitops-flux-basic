---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: servers.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
  labels:
    helm.sh/chart: linkerd-control-plane-1.1.11-edge
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  names:
    kind: Server
    plural: servers
    singular: server
    shortNames: [srv]
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: false
      deprecated: true
      deprecationWarning: "policy.linkerd.io/v1alpha1 Server is deprecated; use policy.linkerd.io/v1beta1 Server"
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.
                  oneOf:
                    - required: [matchExpressions]
                    - required: [matchLabels]
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.

                    The result of matchLabels and matchExpressions are ANDed.
                    Selects all if empty.
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
      additionalPrinterColumns:
      - name: Port
        type: string
        description: The port the server is listening on
        jsonPath: .spec.port
      - name: Protocol
        type: string
        description: The protocol of the server
        jsonPath: .spec.proxyProtocol
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serverauthorizations.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
  labels:
    helm.sh/chart: linkerd-control-plane-1.1.11-edge
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  scope: Namespaced
  names:
    kind: ServerAuthorization
    plural: serverauthorizations
    singular: serverauthorization
    shortNames: [saz]
  versions:
    - name: v1alpha1
      served: true
      storage: false
      deprecated: true
      deprecationWarning: "policy.linkerd.io/v1alpha1 ServerAuthorization is deprecated; use policy.linkerd.io/v1beta1 ServerAuthorization"
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      oneOf:
                        - required: [matchLabels]
                        - required: [matchExpressions]
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  oneOf:
                    - required: [meshTLS]
                    - required: [unauthenticated]
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      oneOf:
                        - required: [unauthenticatedTLS]
                        - required: [identities]
                        - required: [serviceAccounts]
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      oneOf:
                        - required: [matchLabels]
                        - required: [matchExpressions]
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  oneOf:
                    - required: [meshTLS]
                    - required: [unauthenticated]
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      oneOf:
                        - required: [unauthenticatedTLS]
                        - required: [identities]
                        - required: [serviceAccounts]
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
      additionalPrinterColumns:
      - name: Server
        type: string
        description: The server that this grants access to
        jsonPath: .spec.server.name
---
###
### Service Profile CRD
###
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serviceprofiles.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
  labels:
    helm.sh/chart: linkerd-control-plane-1.1.11-edge
    linkerd.io/control-plane-ns: linkerd
spec:
  group: linkerd.io
  versions:
  - name: v1alpha1
    served: true
    storage: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            description: Spec is the custom resource spec
            required:
            - routes
            properties:
              dstOverrides:
                type: array
                required:
                - authority
                - weight
                items:
                  type: object
                  description: WeightedDst is a weighted alternate destination.
                  properties:
                    authority:
                      type: string
                    weight:
                      x-kubernetes-int-or-string: true
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
              opaquePorts:
                type: array
                items:
                  type: string
              retryBudget:
                type: object
                required:
                - minRetriesPerSecond
                - retryRatio
                - ttl
                description: RetryBudget describes the maximum number of retries that should be issued to this service.
                properties:
                  minRetriesPerSecond:
                    format: int32
                    type: integer
                  retryRatio:
                    type: number
                    format: float
                  ttl:
                    type: string
              routes:
                type: array
                items:
                  type: object
                  description: RouteSpec specifies a Route resource.
                  required:
                  - condition
                  - name
                  properties:
                    condition:
                      type: object
                      description: RequestMatch describes the conditions under which to match a Route.
                      properties:
                        pathRegex:
                          type: string
                        method:
                          type: string
                        all:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        any:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        not:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                    isRetryable:
                      type: boolean
                    name:
                      type: string
                    timeout:
                      type: string
                    responseClasses:
                      type: array
                      items:
                        type: object
                        required:
                        - condition
                        description: ResponseClass describes how to classify a response (e.g. success or failures).
                        properties:
                          condition:
                            type: object
                            description: ResponseMatch describes the conditions under
                              which to classify a response.
                            properties:
                              all:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              any:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              not:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              status:
                                type: object
                                description: Range describes a range of integers (e.g. status codes).
                                properties:
                                  max:
                                    format: int32
                                    type: integer
                                  min:
                                    format: int32
                                    type: integer
                          isFailure:
                            type: boolean
  - name: v1alpha2
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            description: Spec is the custom resource spec
            properties:
              dstOverrides:
                type: array
                required:
                - authority
                - weight
                items:
                  type: object
                  description: WeightedDst is a weighted alternate destination.
                  properties:
                    authority:
                      type: string
                    weight:
                      x-kubernetes-int-or-string: true
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
              opaquePorts:
                type: array
                items:
                  type: string
              retryBudget:
                type: object
                required:
                - minRetriesPerSecond
                - retryRatio
                - ttl
                description: RetryBudget describes the maximum number of retries that should be issued to this service.
                properties:
                  minRetriesPerSecond:
                    format: int32
                    type: integer
                  retryRatio:
                    type: number
                    format: float
                  ttl:
                    type: string
              routes:
                type: array
                items:
                  type: object
                  description: RouteSpec specifies a Route resource.
                  required:
                  - condition
                  - name
                  properties:
                    condition:
                      type: object
                      description: RequestMatch describes the conditions under which to match a Route.
                      properties:
                        pathRegex:
                          type: string
                        method:
                          type: string
                        all:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        any:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        not:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                    isRetryable:
                      type: boolean
                    name:
                      type: string
                    timeout:
                      type: string
                    responseClasses:
                      type: array
                      items:
                        type: object
                        required:
                        - condition
                        description: ResponseClass describes how to classify a response (e.g. success or failures).
                        properties:
                          condition:
                            type: object
                            description: ResponseMatch describes the conditions under
                              which to classify a response.
                            properties:
                              all:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              any:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              not:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              status:
                                type: object
                                description: Range describes a range of integers (e.g. status codes).
                                properties:
                                  max:
                                    format: int32
                                    type: integer
                                  min:
                                    format: int32
                                    type: integer
                          isFailure:
                            type: boolean
  scope: Namespaced
  preserveUnknownFields: false
  names:
    plural: serviceprofiles
    singular: serviceprofile
    kind: ServiceProfile
    shortNames:
    - sp
---
###
### Linkerd Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd
  annotations:
    linkerd.io/inject: disabled
  labels:
    linkerd.io/is-control-plane: "true"
    config.linkerd.io/admission-webhooks: disabled
    linkerd.io/control-plane-ns: linkerd
---
###
### Identity Controller Service RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-identity
subjects:
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
---
###
### Destination Controller Service
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "nodes", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["discovery.k8s.io"]
  resources: ["endpointslices"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-destination
subjects:
- kind: ServiceAccount
  name: linkerd-destination
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-destination
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-sp-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUpoMGphZEZEUVZzT05DVmRkS3AreWd3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3TXpJM01UUXpOelUxV2hjTk1qTXdNekkzTVRRek56VTFXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU9hWmJ3SE1Tc3dabU8xaFhINExvVi9OZTQwelFiRVJpWjdrb0trSmNmcTdpRFR6Y0QvQQpQR3ZnU0VXSUk3MGRFMVJIM0JFTDFHNnV3U25PYjhmRjhwL2htbmpoN2J5SnFnSVNITFAvSWd0dVFBSWd3eWg2Cm9uUkdUZjBDZDZJdmRTMUFseVN6b01BT2E0YzFsMkhLU29oVG1Hb3ptOE45UjMzWlNtOHVraXowTzVPVXFod2cKUWJ3VWxtYkxZL3RrWkNjTHI5bFVzRnZqRXFwb296K2VpMStVVUpxb3k1dlhSOEQyaUJzaW03NWwwbFkrVTBneAo1SkZEOEgrc29wNFJLQ0ttUXExendlbTI5dzdOWVZlSFFRczlDZVQrMDhHbXo5aHpZTTl0amNGYThtZkozSkFUCmlwRGVvclRBTFM0dzZ3ZHZxVWRiUW5sL0xYR1AzcDFSbThrQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBbWtuZ1p2bk1QUmdMTkFVZ2FldDBVNmtXazJjdUhQd0FUQ3FFbnhNc3AKQWw0VkZjRjIzL1VNSDhodjFjVVptRXJ6R3Nqa0NzdzhCS1dBT3NaM1M2UlZDMjNXejFiMlBVWnFiKzFrOHU0MApGSXBvdEgyZnlWMExNRWVLK09wc0FRTGpESk82NkhCelZyTUMzQVFIeHNGOW13aDIyeStHSk9LNTdvay8yOGlVCnpaU3Z3VzZ6ZWpXeGNOdzJ2Nk5zbVJPY3loTG9CTGQyOEl1Q3lzdHFkNHZta3JxK09hVXgzb0ZBKzNOK1AwamkKYW1QWDNhU1Nxc25JTm9DRXNzR3llVGMvM0phY3BWbFRzRVc2S2NwRDcvMm5NMktWczFFY1BiWkZqcDdETDJZeQpoNml6Zmhsby9GUlU5bTVIdVNvUlFCR2U3RDR0YzVZcmh1emRGWVdFM2xkYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNXBsdkFjeEt6Qm1ZN1dGY2ZndWhYODE3alROQnNSR0pudVNncVFseCtydUlOUE53ClA4QThhK0JJUllnanZSMFRWRWZjRVF2VWJxN0JLYzV2eDhYeW4rR2FlT0h0dkltcUFoSWNzLzhpQzI1QUFpREQKS0hxaWRFWk4vUUozb2k5MUxVQ1hKTE9nd0E1cmh6V1hZY3BLaUZPWWFqT2J3MzFIZmRsS2J5NlNMUFE3azVTcQpIQ0JCdkJTV1pzdGorMlJrSnd1djJWU3dXK01TcW1palA1NkxYNVJRbXFqTG05ZEh3UGFJR3lLYnZtWFNWajVUClNESGtrVVB3ZjZ5aW5oRW9JcVpDclhQQjZiYjNEczFoVjRkQkN6MEo1UDdUd2FiUDJITmd6MjJOd1ZyeVo4bmMKa0JPS2tONml0TUF0TGpEckIyK3BSMXRDZVg4dGNZL2VuVkdieVFJREFRQUJBb0lCQVFEZW1ERjlqTlNPM0E2dwo1aERBWXoydEdzOHU1OUY3dVRBZFB4aU8wMTFBNlJGNys1blpFQm5ERUVielI0MG9HZzcwaGtFNSt5OWVnRFpaCndycElIeDRya3p6bmZ6OWJoWStrWEJOMDlNektOK3gxb1dhQmhvK1dxZDdTWWpWVlMzWlM3a3gzMHlWUy94aHcKOWh4ZyswS2pBZjdZVldVQWVjZ3ZCVGRDeDdPMnkxMjBaNXF6WWRmS254Rk1zTTBYeXphS1dUQXBwVVdIcnA3TApJV0lzTVRubzBJSkF6VEFkemNKQ0NPUFJFeEkzYU5tUE16dGtpTkx2cm85bmpIZ3I1QmZFdWx0cDhWOHNvazF2CkZ2YXV1YmNPQjM4cUIxbTk1aFRoVEpWeWtSOU50aytHcWs0ekUzQXhpSWF2ak5XVkxHejlQMDk2enBuSnZNekMKRU9odDFQbmhBb0dCQU9leWcvNHBhZ3JXQUpQcjFMS3psbktxOEw0a2xCV0o1cHFJaWdiWTZ3blppSkpmVWdJbQpYWUlOK2FtQ21IWktyMFFDQWdqamFIMWhrdGIvWVpQbWhRNDltcDZnYUViVVhscGpBVFdMS0YrR1IrdDI3UGR3ClZXWmp2S1hQWHY3ZWZ1bFV2UW1OVDJPNDllekxwRGRSVlI1WGIvN055bG1jaGtydDlkQ2hEM2V0QW9HQkFQN0oKYjNiZU9iR2gxTzQ5YWRweTVuTFRkU1o2c1hEekduNWJhWk9BRDExakFoZHVYcVJRaWNub2xkRmE5a2FvTDVpSQoxc1A0KzVWMlBreXFyYThUb2M4UGZJS0F2bTJFMlpwb1RDOGtZa29EYWRvb0ZhNTgrV0N2Yk1sdERDRno4enZuCmx2RUQ2S25uSFF5YkljaHpkNTZsV0w4SURIbmkySGdUUW5tSTI2Z05Bb0dBYVJCa0ZoNkZmWUJwSnFwcit0VEEKeGlLSnBFOUY3elpuSVhBRTF2SUtNcDgzOU5mUWdqVVBkZWdNYkRkU0YySHFjL1pOSWVhcy9SMy96Z3BrSHdNTApGdGdNZ3gzTjYwQmx3S3JnWTMxRXczeEtwSlY3QXdFbldKU2xlTEsrS3VpTnVCUzYyOWYrUmdRYlVGTlBsZDRGCnNRcUpPSXZzMUJITU83SUlJNkRGT01rQ2dZRUFwZlVQWlozYWRwbXkySHVvTjJJZ09Tc0RZODBIUjBzU05ydlUKU1A5aEFyTTY2WWc2blV6WWMydk1LbEhWbUxCMFVDYlJ2VlN3aXVvNktqWUNhOGVkM2dGNFdJa0RnTkxINm91RgpGQy9lMWRialcvWkFLU2UrUi92OElEZW5ieUxYakcyTkkvQW4zSU50cUloanVPMTlQUmoyZFhnSXFGdmFKRnhuCk1FSzAwUUVDZ1lFQXFKZkFhVFlFMjhhS1dUL0pUZjllcWxqWHVsMHc1K1ZVMjZXaVZXeWFSczR4Ni85enZKNUgKQ3NPMitwc080T1hoMmxXZElKNFMzc2QyTmx2OGdteTdFYkxYT29ZOEgvSnRVK3lqd3E4aFBRZzl1NzZqYzJyaQpnZzJtWlRCVk1wRHl2UVNnL2ZWamNEUXh1QlZsUHRFblMwbFZOR0UzWnoyS2w5a3NXTFBxTTRBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-sp-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-sp-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-sp-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUpoMGphZEZEUVZzT05DVmRkS3AreWd3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3TXpJM01UUXpOelUxV2hjTk1qTXdNekkzTVRRek56VTFXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU9hWmJ3SE1Tc3dabU8xaFhINExvVi9OZTQwelFiRVJpWjdrb0trSmNmcTdpRFR6Y0QvQQpQR3ZnU0VXSUk3MGRFMVJIM0JFTDFHNnV3U25PYjhmRjhwL2htbmpoN2J5SnFnSVNITFAvSWd0dVFBSWd3eWg2Cm9uUkdUZjBDZDZJdmRTMUFseVN6b01BT2E0YzFsMkhLU29oVG1Hb3ptOE45UjMzWlNtOHVraXowTzVPVXFod2cKUWJ3VWxtYkxZL3RrWkNjTHI5bFVzRnZqRXFwb296K2VpMStVVUpxb3k1dlhSOEQyaUJzaW03NWwwbFkrVTBneAo1SkZEOEgrc29wNFJLQ0ttUXExendlbTI5dzdOWVZlSFFRczlDZVQrMDhHbXo5aHpZTTl0amNGYThtZkozSkFUCmlwRGVvclRBTFM0dzZ3ZHZxVWRiUW5sL0xYR1AzcDFSbThrQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBbWtuZ1p2bk1QUmdMTkFVZ2FldDBVNmtXazJjdUhQd0FUQ3FFbnhNc3AKQWw0VkZjRjIzL1VNSDhodjFjVVptRXJ6R3Nqa0NzdzhCS1dBT3NaM1M2UlZDMjNXejFiMlBVWnFiKzFrOHU0MApGSXBvdEgyZnlWMExNRWVLK09wc0FRTGpESk82NkhCelZyTUMzQVFIeHNGOW13aDIyeStHSk9LNTdvay8yOGlVCnpaU3Z3VzZ6ZWpXeGNOdzJ2Nk5zbVJPY3loTG9CTGQyOEl1Q3lzdHFkNHZta3JxK09hVXgzb0ZBKzNOK1AwamkKYW1QWDNhU1Nxc25JTm9DRXNzR3llVGMvM0phY3BWbFRzRVc2S2NwRDcvMm5NMktWczFFY1BiWkZqcDdETDJZeQpoNml6Zmhsby9GUlU5bTVIdVNvUlFCR2U3RDR0YzVZcmh1emRGWVdFM2xkYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["linkerd.io"]
    apiVersions: ["v1alpha1", "v1alpha2"]
    resources: ["serviceprofiles"]
  sideEffects: None
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-policy-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRSlEvVGlMSlNJV1dsVHNEbTBHUk9rakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJd016STNNVFF6TnpVMVdoY05Nak13TXpJM01UUXpOelUxV2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURYakFsSkVpSnJpOHU3TUxZVTh6TVpia094YzhhQklDME8wYkxaeGt3Ywo5UzZtQlBJOUQrSlYwQjlKOFZUVjF3b2dzdW5waUlYeHBkTEFTR2diVzVZTTF1UkVrcW5jTkJvaFdYOGYyRXhRCjRrdG9qTHAxY1dCMDlhdFQzclNDYUcxK2l1Q09BaURDQmoza1docW00SjRDbEJwMGF0MlBnZnBGR3NscW8rUEcKM1ZCSWFBanFJMi9yRDA3QklOZTJwNjRQbGloQ1FUOWI4ZlpKbU43Z1M4YWFQWlViZXNxdS8xTE1oNHY4Mml4UApDeXNCcU5KOWZIR0ZtaWtETFlIYld3Y2pkWllkY0oxUzczdEFWL09ORFFjN1hrVzZRYjBmZW8xSXQ5SFQyUVQ4CjNJSVJJZ2M3cmdTdVBRTW5WNi82ekpadDg5RTcyM3daNUQvTzlKUlRuUzc3QWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBSklVeUNSM1hrQ1YvQzFRc0x6UXZwMkl2UlUKWWhWQ0VkdEZIZ3FZS3NsQTJiODlVWEVDWnVFb1F5bm54ME1zeUFuTkN4M1Q4UjdRVk12ak5hMXUwNU9yUGFQdQpxeE9vQi93OGVVZUJKZmxiVTVQQXFXRUhwZnQxYmtjSnZVOUk1RVNFanJJbEErdVUrRjl6anhoQStzd1ZPN0l1CjExamk0QVk0dUtmNGlUWHlCMVZMQjBUWlZzTmJZTVFKUWVxYnBoTDhEV0NxWEFmcUhZU29XUldKV3lsUCtrSWQKZW1YcWgyM01qcmtMTUdDRzVVeE82S2piTFQ0U1krbklSOVd6Q1JPZGxuWnltcHVrMmhRckZtYXJZRjdlV3NFVApCMXVZc1FCck92NGlMMFJBRWFtVThsU09zZ2k5eS8vMFIwREJRa0EySHBFR25QY3g5YXloVWQxRG9SWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMTR3SlNSSWlhNHZMdXpDMkZQTXpHVzVEc1hQR2dTQXREdEd5MmNaTUhQVXVwZ1R5ClBRL2lWZEFmU2ZGVTFkY0tJTExwNllpRjhhWFN3RWhvRzF1V0ROYmtSSktwM0RRYUlWbC9IOWhNVU9KTGFJeTYKZFhGZ2RQV3JVOTYwZ21odGZvcmdqZ0lnd2dZOTVGb2FwdUNlQXBRYWRHcmRqNEg2UlJySmFxUGp4dDFRU0dnSQo2aU52Nnc5T3dTRFh0cWV1RDVZb1FrRS9XL0gyU1pqZTRFdkdtajJWRzNyS3J2OVN6SWVML05vc1R3c3JBYWpTCmZYeHhoWm9wQXkyQjIxc0hJM1dXSFhDZFV1OTdRRmZ6alEwSE8xNUZ1a0c5SDNxTlNMZlIwOWtFL055Q0VTSUgKTzY0RXJqMERKMWV2K3N5V2JmUFJPOXQ4R2VRL3p2U1VVNTB1K3dJREFRQUJBb0lCQVFEWFRPT0JmNEd1RndjNwpSVjY2OG1uYVB3K1MwdWcyMXFMcktIOFRsRVUycjVrVzc5M2ZMRnlTQnI4YUp0cnNkazJCZC9TNTlrcUVvM1F0CjZLVkVubWoxRGprWVhiOFpXMW0yY2lUTzlFaldpaE4wclEwYWZsTXd3S3VQck9aMVZFWDZubEhLeDBsZFJNclIKcTBidjVYRXZkaXd1bVFnU2JteEVWb3RWMzdxSFNYWVJOZ0txelVqTkQ4QW9BM3g4Mi9vT2hqVmgrM21tUWtVawpzdlNmVExoWDdCSDRodHBzazd4NDlxaVQ2cVVacHF1Q0lPc0JBSTdNNlIvTUEvaHNlalFTSFJWbldCWmN3czRECmxndjdoU0phK1FxQU9CcGtVcThpbnZTWE1pcWFVN0p0QXVyNFg5SFU5MVp0aWhYTG5TdWdRVVVCSWxVZXBlelcKQlhsMStFb3hBb0dCQVArZTZ6bWNlaXJVYXp3aEN4RTgrTUNRMlc1QzB5WTkydU9iWXA5L3paWmZhYlJ2aW5nbwp3WHBjMFhidUcwYUJKZHhwcjNGKytERGtXaG1aL1JVVkVWUCtVeXN6djNLU25TQkF2SkkvR0xqVHZIbEZUVENVCnBDUnlKU0Y2WWUxcWpObC9zS1lKdDk3OVpCbXduT1duZjh5WExVUVoyRHJzb1Q4WVVvM1B2L3VuQW9HQkFOZmQKNWVITU1lVDZnMlAxMU9zNTlnc2l6ZU1OR3pHRmFRVDNSMFQ1MnkxM1l2Z2tJRDFzdGs0MURmN3R4aVRoMVV6TwpxTUtPekdXdWZmYVk0SEUzSDdCMENoSmJxcDhuSHVkWnlXTUk0em1YZ2ozY2VkNTRGK3BRc2VZbzNrbWFSNm1CCkFValBudTVHQ3Q2Q3I3dkxab29LNkxuQWdidDdvcHpkMHdzenhreU5Bb0dCQU80RXJFTVkwU2pRWW9tNnV2TnkKTXE0Y01sblpINE9jVlJWYXVwcUtCb1Rla3k3UUxiOTFNN01jZW02amlBSStmMktkaGgvSWVwSU1EMW1IYVlFWAovT3FaQmhoVU54QVlOUGF6VU9OY25VaDg0Q0tMeFRSWE5BQTd5UmREUGF3MGFyS2JrNEVIeTQ1M281M0lObEFoCmgzNlp4aXlEWkRSNTRpcytHcUN4c2JKQkFvR0FVUitXQmE1TVRlWUxQS1NsR0tWV25zYThvd2hJNE9wbkZqT3IKdC9OQitDczJxVlJDUFhNK2E5T3FaOVNKczFDZmJWYjR1dTBaU1ZrekExcGVkbzJsdmhWTnQ2cDFTNHhUSTlSdApSMmVPcFJVWUlCRmNSMHZRaVFFOGFlZVA2Zzh0d1RpMjk5cjJ1a3JlU05MS0lnUUZpL2tmanJjV3loTmpnQm9vCjlydkZXUDBDZ1lCcDFsd3dQOFgrQ0lxL2xvL0R2Nm84UEFuR0JDRTF1MzZyeFZjcWVTTU1iWE0xQmxuMUVGenAKV2ZLYWxmQ054WHg1TU85a3EzQTRvVFVPNGlmMlRyRWx6dWMzUnB6WmtjTUZYY2FRVHRDZ01TN25TRTZqV2FVegpvSFdMdUMxRGEyRTlXZTR0ZWl0VUVwODlVOVcwVWx5a2RUcHVGZ2NIZEhZMytOeXFxZnV2S1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-policy-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-policy-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-policy-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRSlEvVGlMSlNJV1dsVHNEbTBHUk9rakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJd016STNNVFF6TnpVMVdoY05Nak13TXpJM01UUXpOelUxV2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURYakFsSkVpSnJpOHU3TUxZVTh6TVpia094YzhhQklDME8wYkxaeGt3Ywo5UzZtQlBJOUQrSlYwQjlKOFZUVjF3b2dzdW5waUlYeHBkTEFTR2diVzVZTTF1UkVrcW5jTkJvaFdYOGYyRXhRCjRrdG9qTHAxY1dCMDlhdFQzclNDYUcxK2l1Q09BaURDQmoza1docW00SjRDbEJwMGF0MlBnZnBGR3NscW8rUEcKM1ZCSWFBanFJMi9yRDA3QklOZTJwNjRQbGloQ1FUOWI4ZlpKbU43Z1M4YWFQWlViZXNxdS8xTE1oNHY4Mml4UApDeXNCcU5KOWZIR0ZtaWtETFlIYld3Y2pkWllkY0oxUzczdEFWL09ORFFjN1hrVzZRYjBmZW8xSXQ5SFQyUVQ4CjNJSVJJZ2M3cmdTdVBRTW5WNi82ekpadDg5RTcyM3daNUQvTzlKUlRuUzc3QWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBSklVeUNSM1hrQ1YvQzFRc0x6UXZwMkl2UlUKWWhWQ0VkdEZIZ3FZS3NsQTJiODlVWEVDWnVFb1F5bm54ME1zeUFuTkN4M1Q4UjdRVk12ak5hMXUwNU9yUGFQdQpxeE9vQi93OGVVZUJKZmxiVTVQQXFXRUhwZnQxYmtjSnZVOUk1RVNFanJJbEErdVUrRjl6anhoQStzd1ZPN0l1CjExamk0QVk0dUtmNGlUWHlCMVZMQjBUWlZzTmJZTVFKUWVxYnBoTDhEV0NxWEFmcUhZU29XUldKV3lsUCtrSWQKZW1YcWgyM01qcmtMTUdDRzVVeE82S2piTFQ0U1krbklSOVd6Q1JPZGxuWnltcHVrMmhRckZtYXJZRjdlV3NFVApCMXVZc1FCck92NGlMMFJBRWFtVThsU09zZ2k5eS8vMFIwREJRa0EySHBFR25QY3g5YXloVWQxRG9SWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["policy.linkerd.io"]
    apiVersions: ["v1alpha1", "v1beta1"]
    resources:
    - serverauthorizations
    - servers
  sideEffects: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy.linkerd.io
    resources:
      - servers
      - serverauthorizations
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-destination-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-policy
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd
---
###
### Heartbeat RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: Role
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: ClusterRole
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
---
###
### Proxy Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces", "replicationcontrollers"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
subjects:
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-proxy-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-proxy-injector-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUtjdzVweExZNmU0NG9rSkFJWGpJL3N3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBek1qY3hORE0zTlRWYUZ3MHlNekF6TWpjeE5ETTNOVFZhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRREl6azFmN04xQ0dyY1BrTnJ3MldqTVdZSW5xa25URk41SDRSZDgrWkpJc1VQcwpNSUcvK2NacDFvUndRcEsxZWlWbGpYMDE5YS9TdUtaUzRaYkxPTThYQ3krSkM0SVQ2Z1FkTWNKL2VVb0E2N3d3CjNOckdESTBpcnl5SytiMTZKUURnRW5SdkhNQ1pEeEpERkd2cGxXRjUzZ2c1ZXVnOHl1N1ZoWmZ1Q3Y5QysrWDMKajhWOTkrdTl1NkFWcEk3VG0xTVk3YVZMbk10Q1M0ZFdkS1JHR3VmRldFaHJubUsrRkQ5T3FBMUJIMmxnVmFkVApQYmIwbWRyRDh3Nk5uR3FOUXdINENwOVZxUDhka1dEajJSWlJJbGp2cEpRTUlkYmcwbDBZZVJXU0NNK3MxYUtXCkd2NmoxMHBwang0SlMvQk9PaHMxQW5PS0FzSHh5U205SC9XbkdtVnpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFWbXcxVHJBZXRxMXhqQTNJbzQ5M29Ib3NvcTdmTE8wWWYKcWUzeTMxKzcvd2dVT2NtZTdTU3ArWDhaWFE2QVJKcVlUekVUSVF4U21sbjk3Q2NFWG1lcFl3RENhUndWY2tjNApydStrWUhoay8vZGhyeXpHMUR4VGRWSUZuRWRBd0F3TktrK0dsbkZQR25SV2tKSkMrbmVNdDBUTUZKamI4ZjZ4ClZrS0R3VWtQQUUwalB2c2JYNFVHNERTTERKck9MY1h4TXN2NWtxVEFrU1cyczBuMGRRQ1EwUVJFMVhQRCtpVWcKK0FsSFJpVDl6TVY0WW84OVBTamxROWkvQkNjZ2NOS2FLOTlZclNFbUo2bTNQVGh0K0gzZFRUOXFMNXpqaEJPUgp3NUZ4RkMvV2xudWtVNmFTbmluTHFXc3NsdHl6eTNIUHNma1cyZmw4MVJDci9KUGROSjJvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBeU01TlgremRRaHEzRDVEYThObG96Rm1DSjZwSjB4VGVSK0VYZlBtU1NMRkQ3RENCCnYvbkdhZGFFY0VLU3RYb2xaWTE5TmZXdjByaW1VdUdXeXpqUEZ3c3ZpUXVDRStvRUhUSENmM2xLQU91OE1OemEKeGd5TklxOHNpdm05ZWlVQTRCSjBieHpBbVE4U1F4UnI2WlZoZWQ0SU9Ycm9QTXJ1MVlXWDdnci9RdnZsOTQvRgpmZmZydmJ1Z0ZhU08wNXRUR08ybFM1ekxRa3VIVm5Ta1Jocm54VmhJYTU1aXZoUS9UcWdOUVI5cFlGV25VejIyCjlKbmF3L01Palp4cWpVTUIrQXFmVmFqL0haRmc0OWtXVVNKWTc2U1VEQ0hXNE5KZEdIa1ZrZ2pQck5XaWxocisKbzlkS2FZOGVDVXZ3VGpvYk5RSnppZ0xCOGNrcHZSLzFweHBsY3dJREFRQUJBb0lCQUZGMDVveElFSVVWUXpjcwpRclE2N1RrZ0FoMUhCY1Y3aktQSjJuWlc0eEZiM3pxN2ZwYTZvdE1pTXYwNjlEcHJ2eW5QMklBQUZ2KzY2YlZyClQzbEdwVE1xMVhDWlczM3FpeHF3cWI1K0hCZjlpSXlsdXBWbVdBWSsyeW5SSHh5aVVCV1ZSdWdmMkx6K0VTRm0KOGxPQnhsWGlUS0hNaXRMR1cxWUFhRjRtMWQ5OGlZTVVBcGFYV0JMWFpvNEdEVHhNcTJraGE2MGFBQ1BsUjYzMQp3QlZYRk1ON3pzRjFFT1VzTWhIdXJBbnU2RElBa0NVdzJ1Nkd4Q3NvTktCRDVvMnprZEl2R1RZa1JjZVZXZG13CnI3Ni95Y0NXaVN1b0QyVTJtRHV1WXk5QUZMaC9wRVdNUFBEUWZ5VEx1M0UzZTIvajdQVUhGNmNFWWxVMFlueGQKQWluVFoxa0NnWUVBNm0xOWlLZHdGTGNidEpjWjR3MzUyYzV3eDNmME9FMi82Y0MvVzVmNW9DTVFQdSt2QkU4NgpUYjFSdTdBaVlnQTA1UTdnUFhQNWovQWV2ZG40WkRZN0ZlMzQxMkJ3MDVVd0t3aEZOMmNFNEVFWTlpZHJNcGUwClQxS0QxSU0vU0c0L3o1U0J2a1c2VGVkMTdXUG0ydUFHQUVlMVd4aE16dnhUOElib05Cb0dFK1VDZ1lFQTIwakUKeFloUG1PbjBBRFFJVUdkdEptSUxDY1ZRVEZWbERiVlJUMlFkdkRQOVJYa3AyR3JHOWlqbDhWZTQ2dzVZMXU4dQp3c0tLL0RRU2ovYURNS0I3eDI0dHJJVnFsei9sdFQ3d2JOdlBhUEdRV09DRFJKWEptVS9DZXFlOVR3cUxRMDIwCmlXV3RoQXBiWEpFUlZ1RG9FbnQ2NS9MeW9YZnBUT01qc1Zpa0xuY0NnWUJFZkZ3eU1naFNaUFFaSEJPWis1bEUKZ2tUOFlSVGQ1Z2pzOXp4d084UFhmcWJlWEJOYlJQSVpoL2Q2eDRnajdUK0dzNFBiTUNoMlhvWDhuTk11STVHNwpaRnhRUDRKMnJaejIxV0d6UDh0eTRGRzBoK3VQU2phSS9lZzVpMlpQZUxYM3BNRUtuMEJBUmlCemk3NERyM0xSClhpR2pUVVFUTERBeGtwZi9zS0taNlFLQmdGaGhWZDEvZVFWYWxkdFhIVnE2dE1WWmtyVlhiMnUwcDB3RkhrWnYKUllUTE4zTSt5RnpQZkcxT1FvOHBHZ0N6QVo5dk8xdUg2VmlJN0VwVndyNWdrRUxxNTBHM2JDU1Z2bEYwa3BadAphWVVVaDJjcTVmMUltYjVPNVVWbVFlaVBpVjJRL2dpNmtGcTlpZUVmSHV2ekxkWDFLcTQ5dndqUk9aaWhtNHNvCi9OTTFBb0dBSFZkM0lvRWJOc3R4RW94TlFLRStsQWVWOGc4dldJcFBmMGRyT1MzbW5ic2szdFAyOThOT0d1TngKZnlYSHB4N3Njd3NGTmYvNUNZbzI1M3VmY2xQL2xsUysxZlZTRDcxSHpha0ZldTBhR3ZKdlI0anpFY2VYTTA4TQpaWGFFQlJLaW51QytvWDBHeXJDYmJMY1pkaGtkekZPOWtiRVhLd21WWFJOTHo4aXJYaDQ9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-proxy-injector-webhook-config
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-proxy-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
      - cert-manager
  objectSelector:
    null
  clientConfig:
    service:
      name: linkerd-proxy-injector
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUtjdzVweExZNmU0NG9rSkFJWGpJL3N3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBek1qY3hORE0zTlRWYUZ3MHlNekF6TWpjeE5ETTNOVFZhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRREl6azFmN04xQ0dyY1BrTnJ3MldqTVdZSW5xa25URk41SDRSZDgrWkpJc1VQcwpNSUcvK2NacDFvUndRcEsxZWlWbGpYMDE5YS9TdUtaUzRaYkxPTThYQ3krSkM0SVQ2Z1FkTWNKL2VVb0E2N3d3CjNOckdESTBpcnl5SytiMTZKUURnRW5SdkhNQ1pEeEpERkd2cGxXRjUzZ2c1ZXVnOHl1N1ZoWmZ1Q3Y5QysrWDMKajhWOTkrdTl1NkFWcEk3VG0xTVk3YVZMbk10Q1M0ZFdkS1JHR3VmRldFaHJubUsrRkQ5T3FBMUJIMmxnVmFkVApQYmIwbWRyRDh3Nk5uR3FOUXdINENwOVZxUDhka1dEajJSWlJJbGp2cEpRTUlkYmcwbDBZZVJXU0NNK3MxYUtXCkd2NmoxMHBwang0SlMvQk9PaHMxQW5PS0FzSHh5U205SC9XbkdtVnpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFWbXcxVHJBZXRxMXhqQTNJbzQ5M29Ib3NvcTdmTE8wWWYKcWUzeTMxKzcvd2dVT2NtZTdTU3ArWDhaWFE2QVJKcVlUekVUSVF4U21sbjk3Q2NFWG1lcFl3RENhUndWY2tjNApydStrWUhoay8vZGhyeXpHMUR4VGRWSUZuRWRBd0F3TktrK0dsbkZQR25SV2tKSkMrbmVNdDBUTUZKamI4ZjZ4ClZrS0R3VWtQQUUwalB2c2JYNFVHNERTTERKck9MY1h4TXN2NWtxVEFrU1cyczBuMGRRQ1EwUVJFMVhQRCtpVWcKK0FsSFJpVDl6TVY0WW84OVBTamxROWkvQkNjZ2NOS2FLOTlZclNFbUo2bTNQVGh0K0gzZFRUOXFMNXpqaEJPUgp3NUZ4RkMvV2xudWtVNmFTbmluTHFXc3NsdHl6eTNIUHNma1cyZmw4MVJDci9KUGROSjJvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods", "services"]
  sideEffects: None
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
data:
  linkerd-crds-chart-version: linkerd-crds-1.0.0-edge
  values: |
    cliVersion: linkerd/cli edge-22.3.4
    clusterDomain: cluster.local
    clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
    cniEnabled: false
    controlPlaneTracing: false
    controlPlaneTracingNamespace: linkerd-jaeger
    controllerImage: cr.l5d.io/linkerd/controller
    controllerLogFormat: plain
    controllerLogLevel: info
    controllerReplicas: 1
    controllerUID: 2103
    debugContainer:
      image:
        name: cr.l5d.io/linkerd/debug
        pullPolicy: ""
        version: edge-22.3.4
    destinationProxyResources: null
    destinationResources: null
    disableHeartBeat: false
    enableEndpointSlices: true
    enableH2Upgrade: true
    enablePodAntiAffinity: false
    heartbeatResources: null
    heartbeatSchedule: ""
    highAvailability: false
    identity:
      issuer:
        clockSkewAllowance: 20s
        externalCA: false
        issuanceLifetime: 24h0m0s
        scheme: linkerd.io/tls
        tls:
          crtPEM: |
            -----BEGIN CERTIFICATE-----
            MIIBiDCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
            eS5saW5rZXJkLjAeFw0yMjAzMjcxNDM3NDVaFw0yMzAzMjcxNDM4MDVaMBwxGjAY
            BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
            QgAEYiR07is8ydJD4BRVpWCm5Se7H3CzvBlRRYeaIrNx9Na7bIMQISs7yiZDty3b
            +j/jEiRMBm4qwGa2ON9UcmSUyqNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
            MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
            BBRp8q/B+zPbWLb7Y3nsU4vLrlB+1zAKBggqhkjOPQQDAgNIADBFAiEAuCLro2sz
            u483EPJmr87SX/G0Hcfe+Fgx82i9v/hfI2gCIFaIEsPLRvOXmrjXxD5bkYiba++Y
            cF55aBWQNKOMuAOb
            -----END CERTIFICATE-----
      serviceAccountTokenProjection: true
    identityProxyResources: null
    identityResources: null
    identityTrustAnchorsPEM: |
      -----BEGIN CERTIFICATE-----
      MIIBiDCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
      eS5saW5rZXJkLjAeFw0yMjAzMjcxNDM3NDVaFw0yMzAzMjcxNDM4MDVaMBwxGjAY
      BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
      QgAEYiR07is8ydJD4BRVpWCm5Se7H3CzvBlRRYeaIrNx9Na7bIMQISs7yiZDty3b
      +j/jEiRMBm4qwGa2ON9UcmSUyqNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
      MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
      BBRp8q/B+zPbWLb7Y3nsU4vLrlB+1zAKBggqhkjOPQQDAgNIADBFAiEAuCLro2sz
      u483EPJmr87SX/G0Hcfe+Fgx82i9v/hfI2gCIFaIEsPLRvOXmrjXxD5bkYiba++Y
      cF55aBWQNKOMuAOb
      -----END CERTIFICATE-----
    identityTrustDomain: cluster.local
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    linkerdVersion: edge-22.3.4
    nodeSelector:
      kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    policyController:
      defaultAllowPolicy: all-unauthenticated
      image:
        name: cr.l5d.io/linkerd/policy-controller
        pullPolicy: ""
        version: ""
      logLevel: linkerd=info,warn
      resources:
        cpu:
          limit: ""
          request: ""
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
    policyValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      keyPEM: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    priorityClassName: ""
    profileValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    prometheusUrl: ""
    proxy:
      accessLog: ""
      await: true
      capabilities: null
      defaultInboundPolicy: ""
      enableExternalProfiles: false
      image:
        name: cr.l5d.io/linkerd/proxy
        pullPolicy: ""
        version: edge-22.3.4
      inboundConnectTimeout: 100ms
      isGateway: false
      isIngress: false
      logFormat: plain
      logLevel: warn,linkerd=info
      opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
      outboundConnectTimeout: 1000ms
      podInboundPorts: ""
      ports:
        admin: 4191
        control: 4190
        inbound: 4143
        outbound: 4140
      requireIdentityOnInboundPorts: ""
      resources:
        cpu:
          limit: ""
          request: ""
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
      saMountPath: null
      uid: 2102
      waitBeforeExitSeconds: 0
    proxyContainerName: linkerd-proxy
    proxyInit:
      capabilities: null
      closeWaitTimeoutSecs: 0
      ignoreInboundPorts: 4567,4568
      ignoreOutboundPorts: 4567,4568
      image:
        name: cr.l5d.io/linkerd/proxy-init
        pullPolicy: ""
        version: v1.5.3
      logFormat: ""
      logLevel: ""
      resources:
        cpu:
          limit: 100m
          request: 100m
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: 20Mi
          request: 20Mi
      runAsRoot: false
      saMountPath: null
      skipSubnets: ""
      xtMountPath:
        mountPath: /run
        name: linkerd-proxy-init-xtables-lock
        readOnly: false
    proxyInjector:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values:
          - kube-system
          - cert-manager
    proxyInjectorProxyResources: null
    proxyInjectorResources: null
    tolerations: null
    webhookFailurePolicy: Ignore
---
###
### Identity Controller Service
###
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-identity-issuer
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpRENDQVM2Z0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQWNNUm93R0FZRFZRUURFeEZwWkdWdWRHbDAKZVM1c2FXNXJaWEprTGpBZUZ3MHlNakF6TWpjeE5ETTNORFZhRncweU16QXpNamN4TkRNNE1EVmFNQnd4R2pBWQpCZ05WQkFNVEVXbGtaVzUwYVhSNUxteHBibXRsY21RdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEClFnQUVZaVIwN2lzOHlkSkQ0QlJWcFdDbTVTZTdIM0N6dkJsUlJZZWFJck54OU5hN2JJTVFJU3M3eWlaRHR5M2IKK2ovakVpUk1CbTRxd0dhMk9OOVVjbVNVeXFOaE1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRVwpNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCkJCUnA4cS9CK3pQYldMYjdZM25zVTR2THJsQisxekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdUNMcm8yc3oKdTQ4M0VQSm1yODdTWC9HMEhjZmUrRmd4ODJpOXYvaGZJMmdDSUZhSUVzUExSdk9YbXJqWHhENWJrWWliYSsrWQpjRjU1YUJXUU5LT011QU9iCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  key.pem: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU9iTE9xYnRLUDl1Rm5uOGdVUmJzMloyb1pMdW5MblJlanRsY25iZE1tQUFvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFWWlSMDdpczh5ZEpENEJSVnBXQ201U2U3SDNDenZCbFJSWWVhSXJOeDlOYTdiSU1RSVNzNwp5aVpEdHkzYitqL2pFaVJNQm00cXdHYTJPTjlVY21TVXlnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQ==
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-identity-trust-roots
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
data:
  ca-bundle.crt: |
    -----BEGIN CERTIFICATE-----
    MIIBiDCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
    eS5saW5rZXJkLjAeFw0yMjAzMjcxNDM3NDVaFw0yMzAzMjcxNDM4MDVaMBwxGjAY
    BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
    QgAEYiR07is8ydJD4BRVpWCm5Se7H3CzvBlRRYeaIrNx9Na7bIMQISs7yiZDty3b
    +j/jEiRMBm4qwGa2ON9UcmSUyqNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
    MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
    BBRp8q/B+zPbWLb7Y3nsU4vLrlB+1zAKBggqhkjOPQQDAgNIADBFAiEAuCLro2sz
    u483EPJmr87SX/G0Hcfe+Fgx82i9v/hfI2gCIFaIEsPLRvOXmrjXxD5bkYiba++Y
    cF55aBWQNKOMuAOb
    -----END CERTIFICATE-----
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: identity
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-identity
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-22.3.4
        linkerd.io/proxy-version: edge-22.3.4
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: identity
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-identity
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - identity
        - -log-level=info
        - -log-format=plain
        - -controller-namespace=linkerd
        - -identity-trust-domain=cluster.local
        - -identity-issuance-lifetime=24h0m0s
        - -identity-clock-skew-allowance=20s
        - -identity-scheme=linkerd.io/tls
        - -enable-pprof=false
        env:
        - name: LINKERD_DISABLED
          value: "linkerd-await cannot block the identity controller"
        image: cr.l5d.io/linkerd/controller:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9990
          initialDelaySeconds: 10
        name: identity
        ports:
        - containerPort: 8080
          name: grpc
        - containerPort: 9990
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9990
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/issuer
          name: identity-issuer
        - mountPath: /var/run/linkerd/identity/trust-roots/
          name: trust-roots
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS
          value: "8080"
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8080,9990"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/tokens/linkerd-identity-token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: localhost.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
        - mountPath: /var/run/secrets/tokens
          name: linkerd-identity-token
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "20Mi"
          requests:
            cpu: "100m"
            memory: "20Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-identity
      volumes:
      - name: identity-issuer
        secret:
          secretName: linkerd-identity-issuer
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - name: linkerd-identity-token
        projected:
          sources:
          - serviceAccountToken:
              path: linkerd-identity-token
              expirationSeconds: 86400
              audience: identity.l5d.io
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Destination Controller Service
###
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-sp-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: sp-validator
    port: 443
    targetPort: sp-validator
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8090
    targetPort: 8090
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: policy-https
    port: 443
    targetPort: policy-https
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
  labels:
    app.kubernetes.io/name: destination
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-destination
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-22.3.4
        linkerd.io/proxy-version: edge-22.3.4
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: destination
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-destination
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: localhost.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: localhost.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8086,8090,8443,9443,9990,9996,9997"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/tokens/linkerd-identity-token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
                - /usr/lib/linkerd/linkerd-await
                - --timeout=2m
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
        - mountPath: /var/run/secrets/tokens
          name: linkerd-identity-token
      - args:
        - destination
        - -addr=:8086
        - -controller-namespace=linkerd
        - -enable-h2-upgrade=true
        - -log-level=info
        - -log-format=plain
        - -enable-endpoint-slices=true
        - -cluster-domain=cluster.local
        - -identity-trust-domain=cluster.local
        - -default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9996
          initialDelaySeconds: 10
        name: destination
        ports:
        - containerPort: 8086
          name: grpc
        - containerPort: 9996
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9996
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
      - args:
        - sp-validator
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9997
          initialDelaySeconds: 10
        name: sp-validator
        ports:
        - containerPort: 8443
          name: sp-validator
        - containerPort: 9997
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9997
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: sp-tls
          readOnly: true
      - args:
        - --admin-addr=0.0.0.0:9990
        - --control-plane-namespace=linkerd
        - --grpc-addr=0.0.0.0:8090
        - --server-addr=0.0.0.0:9443
        - --server-tls-key=/var/run/linkerd/tls/tls.key
        - --server-tls-certs=/var/run/linkerd/tls/tls.crt
        - --cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
        - --identity-domain=cluster.local
        - --default-policy=all-unauthenticated
        - --log-level=linkerd=info,warn
        - --log-format=plain
        image: cr.l5d.io/linkerd/policy-controller:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: admin
        name: policy
        ports:
        - containerPort: 8090
          name: grpc
        - containerPort: 9990
          name: admin
        - containerPort: 9443
          name: policy-https
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: admin
          initialDelaySeconds: 10
        resources:
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: policy-tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "20Mi"
          requests:
            cpu: "100m"
            memory: "20Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-destination
      volumes:
      - name: sp-tls
        secret:
          secretName: linkerd-sp-validator-k8s-tls
      - name: policy-tls
        secret:
          secretName: linkerd-policy-validator-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - name: linkerd-identity-token
        projected:
          sources:
          - serviceAccountToken:
              path: linkerd-identity-token
              expirationSeconds: 86400
              audience: identity.l5d.io
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Heartbeat
###
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    app.kubernetes.io/name: heartbeat
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
spec:
  concurrencyPolicy: Replace
  schedule: "47 14 * * *"
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            linkerd.io/control-plane-component: heartbeat
            linkerd.io/workload-ns: linkerd
          annotations:
            linkerd.io/created-by: linkerd/cli edge-22.3.4
        spec:
          nodeSelector:
            kubernetes.io/os: linux
          serviceAccountName: linkerd-heartbeat
          restartPolicy: Never
          containers:
          - name: heartbeat
            image: cr.l5d.io/linkerd/controller:edge-22.3.4
            imagePullPolicy: IfNotPresent
            env:
            - name: LINKERD_DISABLED
              value: "the heartbeat controller does not use the proxy"
            args:
            - "heartbeat"
            - "-controller-namespace=linkerd"
            - "-log-level=info"
            - "-log-format=plain"
            - "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090"
            securityContext:
              runAsUser: 2103
              allowPrivilegeEscalation: false
---
###
### Proxy Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
  labels:
    app.kubernetes.io/name: proxy-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: proxy-injector
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-22.3.4
        linkerd.io/proxy-version: edge-22.3.4
        config.linkerd.io/opaque-ports: "8443"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: proxy-injector
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-proxy-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8443,9995"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/tokens/linkerd-identity-token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
                - /usr/lib/linkerd/linkerd-await
                - --timeout=2m
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
        - mountPath: /var/run/secrets/tokens
          name: linkerd-identity-token
      - args:
        - proxy-injector
        - -log-level=info
        - -log-format=plain
        - -linkerd-namespace=linkerd
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: proxy-injector
        ports:
        - containerPort: 8443
          name: proxy-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/identity/trust-roots
          name: trust-roots
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "4567,4568"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "20Mi"
          requests:
            cpu: "100m"
            memory: "20Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-proxy-injector
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - name: tls
        secret:
          secretName: linkerd-proxy-injector-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - name: linkerd-identity-token
        projected:
          sources:
          - serviceAccountToken:
              path: linkerd-identity-token
              expirationSeconds: 86400
              audience: identity.l5d.io
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.3.4
    config.linkerd.io/opaque-ports: "443"
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: proxy-injector
  ports:
  - name: proxy-injector
    port: 443
    targetPort: proxy-injector
---
apiVersion: v1
data:
  linkerd-config-overrides: aWRlbnRpdHk6CiAgaXNzdWVyOgogICAgdGxzOgogICAgICBjcnRQRU06IHwKICAgICAgICAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KICAgICAgICBNSUlCaURDQ0FTNmdBd0lCQWdJQkFUQUtCZ2dxaGtqT1BRUURBakFjTVJvd0dBWURWUVFERXhGcFpHVnVkR2wwCiAgICAgICAgZVM1c2FXNXJaWEprTGpBZUZ3MHlNakF6TWpjeE5ETTNORFZhRncweU16QXpNamN4TkRNNE1EVmFNQnd4R2pBWQogICAgICAgIEJnTlZCQU1URVdsa1pXNTBhWFI1TG14cGJtdGxjbVF1TUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0QKICAgICAgICBRZ0FFWWlSMDdpczh5ZEpENEJSVnBXQ201U2U3SDNDenZCbFJSWWVhSXJOeDlOYTdiSU1RSVNzN3lpWkR0eTNiCiAgICAgICAgK2ovakVpUk1CbTRxd0dhMk9OOVVjbVNVeXFOaE1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRVwogICAgICAgIE1CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVcKICAgICAgICBCQlJwOHEvQit6UGJXTGI3WTNuc1U0dkxybEIrMXpBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlFQXVDTHJvMnN6CiAgICAgICAgdTQ4M0VQSm1yODdTWC9HMEhjZmUrRmd4ODJpOXYvaGZJMmdDSUZhSUVzUExSdk9YbXJqWHhENWJrWWliYSsrWQogICAgICAgIGNGNTVhQldRTktPTXVBT2IKICAgICAgICAtLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiAgICAgIGtleVBFTTogfAogICAgICAgIC0tLS0tQkVHSU4gRUMgUFJJVkFURSBLRVktLS0tLQogICAgICAgIE1IY0NBUUVFSU9iTE9xYnRLUDl1Rm5uOGdVUmJzMloyb1pMdW5MblJlanRsY25iZE1tQUFvQW9HQ0NxR1NNNDkKICAgICAgICBBd0VIb1VRRFFnQUVZaVIwN2lzOHlkSkQ0QlJWcFdDbTVTZTdIM0N6dkJsUlJZZWFJck54OU5hN2JJTVFJU3M3CiAgICAgICAgeWlaRHR5M2Irai9qRWlSTUJtNHF3R2EyT045VWNtU1V5Zz09CiAgICAgICAgLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQppZGVudGl0eVRydXN0QW5jaG9yc1BFTTogfAogIC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQogIE1JSUJpRENDQVM2Z0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQWNNUm93R0FZRFZRUURFeEZwWkdWdWRHbDAKICBlUzVzYVc1clpYSmtMakFlRncweU1qQXpNamN4TkRNM05EVmFGdzB5TXpBek1qY3hORE00TURWYU1Cd3hHakFZCiAgQmdOVkJBTVRFV2xrWlc1MGFYUjVMbXhwYm10bGNtUXVNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRAogIFFnQUVZaVIwN2lzOHlkSkQ0QlJWcFdDbTVTZTdIM0N6dkJsUlJZZWFJck54OU5hN2JJTVFJU3M3eWlaRHR5M2IKICArai9qRWlSTUJtNHF3R2EyT045VWNtU1V5cU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0VHTUIwR0ExVWRKUVFXCiAgTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRVwogIEJCUnA4cS9CK3pQYldMYjdZM25zVTR2THJsQisxekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdUNMcm8yc3oKICB1NDgzRVBKbXI4N1NYL0cwSGNmZStGZ3g4Mmk5di9oZkkyZ0NJRmFJRXNQTFJ2T1htcmpYeEQ1YmtZaWJhKytZCiAgY0Y1NWFCV1FOS09NdUFPYgogIC0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-config-overrides
  namespace: linkerd
