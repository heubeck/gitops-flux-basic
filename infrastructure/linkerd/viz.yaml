---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRTFJNUU54elFqOEEzK2xDeWVwT3FlREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURNeU9USXdORE16TjFvWApEVEl6TURNeU9USXdORE16TjFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2V1NkxDTVRXRFNiK05kSkxpbVVLS3QKV2RQYnB6dzFSaVNuaGRZa0RyZTJ1ek42T3Fwb3JadHhHNkFVUm1WVzdtK0xhcjVLa2U2SXBnaW5NSlBWazlkaQpvVTZ3NW54VWFNaUNmZUF3cVNORlVzajJlbGdkVlZSRnpSd2VBUXZHKzhTVFQ4dHk3K3ZGUXBQVFM0V2lPM2dBCkN0TkJvS1I3WWpPK3RjaHlycEVVUFJYUWkxcVFvUUd4WnFXVC9pRVJkNDVIVlE1QkppbzJobDZ6RmxPeittdzkKVGROM0R5amdCTzVMWWVkUmpOYnBxdWVIampNZHg2Vm1FdFQzS0gzVTdpWStvTEEyUVprb2JlNFdONnUxaFFBNgorYXYrZzVxRmJZdDB1VTdUK1l1QXRES2pybURxeTNoMVJBWndCNm0weFNkdnExc3JsWXFBSW1YQmJkdElyWFVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLSmg1RkNHOWFsZXBndzcyM0VCVE9QMkRjT3ExenJTCmV1dWdSM2d0elBkRVJYbU0yeWVHZXNPdS9OZFV3ZGZGQzJiSW9kOTg0OE5BREk3TCtkdk5QVk1qb3U2WUhnM0oKeStXQzhmWlpLWWhGOGRqRDdnbExQcXRtMjdWRzBXTTlJczlHK3FwNDVNeFpoZDlXdFc3cG9tY2Q5NUxvTmc1UwpkR2Y3aW1reUVWYjhxNWR5Z29wWis4N1V4dEJibTQ2akVFZXdhTTQyZjZWR3M3Y2JTU093Mm5LQ1l2Q3VRN1EvClduVTBMM2wvSWhMdjVQWklqVitjZW5lU2RmQXNrbURHbUlsOUp4RHJiRHRGanhKeHMvT1lDdHRGcUtINU0yWFAKOHY5UHdSMGNXZXJ6aUVtMVJvUnhPQVBiMy9LeFFUNnlMZHc4VTF6bjhBOXNzd2V5ZC84VHY3TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcDY3b3NJeE5ZTkp2NDEwa3VLWlFvcTFaMDl1blBEVkdKS2VGMWlRT3Q3YTdNM282CnFtaXRtM0Vib0JSR1pWYnViNHRxdmtxUjdvaW1DS2N3azlXVDEyS2hUckRtZkZSb3lJSjk0RENwSTBWU3lQWjYKV0IxVlZFWE5IQjRCQzhiN3hKTlB5M0x2NjhWQ2s5TkxoYUk3ZUFBSzAwR2dwSHRpTTc2MXlIS3VrUlE5RmRDTApXcENoQWJGbXBaUCtJUkYzamtkVkRrRW1LamFHWHJNV1U3UDZiRDFOMDNjUEtPQUU3a3RoNTFHTTF1bXE1NGVPCk14M0hwV1lTMVBjb2ZkVHVKajZnc0RaQm1TaHQ3aFkzcTdXRkFEcjVxLzZEbW9WdGkzUzVUdFA1aTRDME1xT3UKWU9yTGVIVkVCbkFIcWJURkoyK3JXeXVWaW9BaVpjRnQyMGl0ZFFJREFRQUJBb0lCQUZCRUZwaGtJS29ITVkzcApTU21tV3hUejIvcmd1eFhEL3BhUEppNlNSZ1ZFMENsZENmWUdjNHZqd2JDSDVBYWdiVFF4elYvWGZERnRjZVRVCmV4bFk5QkwyNEhZMWthN1VEUEJtSG5FUmVmVXJPdXg5cDZURUxkTlFNbFdTT3pmekFSTmczS0pybTFNRnNzL20KSmRHTERlSnNTc0pET08xakxtZk1rMkduRzg3UDFkVmgxNmxINUw0SGZsUE1SUVU2dTYwYUJPc01PYUVWRmJXRApNSUw5VzVndGxFQ2JwcUdoWDh2N1BhY29YYW1kclVNUjdNUVFwaXk5TXNVS0ZIRXlFQkdhKzAvd2xKcjNwcm0xCnprc201eURWS1dtUnRlVWt0QlZQdVRJT2lIZjNNeW02NkhEY3c0TnZGUnp1aDhjeVM2WEFxVWhrajFFLy9PNDkKbEZMeXpjRUNnWUVBeUxzT1lKcHdPa3ZZUW14NEkyVlFLSnhSYzNKa2Z6Vlp6d2MzYk5ZWThnbWlVdmFmSUt2aQpuWXFWWUpkMnVTY1QrZHFIUkNETG9OdkZYSU83L25MRHMwTXJaeVEra2VqSVB0OWo2bXpVWklUVHp5dGRxN2tDCisweEJwcmhrQ01uRDQ0aWhGRkRxenI3WVZERXJESWFjTFhUWnhDbjhyWWpYeWFZNEpoT2dpTkVDZ1lFQTFkcHUKUEtVdlBxcjZCRkJEWGx0TkdNdElXN3FOVWNKbWpBM1lLdzlnUFkzU1M3ajZzM3g1eC85aSsvS0Ivb1ZkZjM2bQpTQXhCSEZLalRaT2I2dzhhUXUxKzJsOWpXNzBKMzYyZnlTZE5hY08rR3Q2TG5VSDhNSUdzL0NITGNGTUZHVkVWCjdySW5WV2NNbytBOWJVVk55cUJVQmh5SDBQUnptc0Y5bHcva1EyVUNnWUFuTkdHYWZJOXUwMkZwbDhYZkkrcUUKQkFQa2lITVlaVk1sSEVPMi9obmhMQUNJTTZMZ3ZyR0VFNDBaVUh2ZnJjSTVDblZnMlFic1pBQW9FWkttSDhRWgpQd1U3SDlrWXBsNTE2U3VhbmFiZCt4TmpZeFRvZFRvZjJzVDN5d3UrcTZtV3h4aXUzeDc5UWtqK0tKdy8xZ3FxCjFpZXlLSUV4WTRqQjJiVWR1cmVnQVFLQmdHajJ3RnJGM1EyT1VBN2o4bDBTeFNHaFRVK3duZ0orUDJVSXVveFEKRExYSnNXbDNUcDNnUDhuWllSVTJyM1Zrc2tLTXdFTG11T0tVOFJCM25mVGV3YzROMGRDUE55NWs5NzZ3OHBlQgowZTVTcERGOS85cmM4MUkvbzg5Ukt4Qmp2MEh3MmFvQ0NXcFNuUkttVXFBYWZ4Y3dZRzFyZllJaktjYlFwN3NJCmtzbzlBb0dCQUx2RWRHVGk0Vms3d21kV3hCMjNvbHNXeWVKc0NtQ25VdnFGY1M0TEVWcVVhQ3RvVVlVOWQ5aDcKTUF3VmpVVWpOL3AwVUUzMUhNS0dISjlBTGQ1c2ZFUHZiOVgyVU5DR201Qm5BRWdQTVZEb0JWcVhrR3NQT3lVVwpwVnhUWTRreDJZWUlpdVZRcis0ankvMVE2ZWdzaDBnbFMzY0pmbVJzNHEzcWVZU21TcitwCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRTFJNUU54elFqOEEzK2xDeWVwT3FlREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURNeU9USXdORE16TjFvWApEVEl6TURNeU9USXdORE16TjFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2V1NkxDTVRXRFNiK05kSkxpbVVLS3QKV2RQYnB6dzFSaVNuaGRZa0RyZTJ1ek42T3Fwb3JadHhHNkFVUm1WVzdtK0xhcjVLa2U2SXBnaW5NSlBWazlkaQpvVTZ3NW54VWFNaUNmZUF3cVNORlVzajJlbGdkVlZSRnpSd2VBUXZHKzhTVFQ4dHk3K3ZGUXBQVFM0V2lPM2dBCkN0TkJvS1I3WWpPK3RjaHlycEVVUFJYUWkxcVFvUUd4WnFXVC9pRVJkNDVIVlE1QkppbzJobDZ6RmxPeittdzkKVGROM0R5amdCTzVMWWVkUmpOYnBxdWVIampNZHg2Vm1FdFQzS0gzVTdpWStvTEEyUVprb2JlNFdONnUxaFFBNgorYXYrZzVxRmJZdDB1VTdUK1l1QXRES2pybURxeTNoMVJBWndCNm0weFNkdnExc3JsWXFBSW1YQmJkdElyWFVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLSmg1RkNHOWFsZXBndzcyM0VCVE9QMkRjT3ExenJTCmV1dWdSM2d0elBkRVJYbU0yeWVHZXNPdS9OZFV3ZGZGQzJiSW9kOTg0OE5BREk3TCtkdk5QVk1qb3U2WUhnM0oKeStXQzhmWlpLWWhGOGRqRDdnbExQcXRtMjdWRzBXTTlJczlHK3FwNDVNeFpoZDlXdFc3cG9tY2Q5NUxvTmc1UwpkR2Y3aW1reUVWYjhxNWR5Z29wWis4N1V4dEJibTQ2akVFZXdhTTQyZjZWR3M3Y2JTU093Mm5LQ1l2Q3VRN1EvClduVTBMM2wvSWhMdjVQWklqVitjZW5lU2RmQXNrbURHbUlsOUp4RHJiRHRGanhKeHMvT1lDdHRGcUtINU0yWFAKOHY5UHdSMGNXZXJ6aUVtMVJvUnhPQVBiMy9LeFFUNnlMZHc4VTF6bjhBOXNzd2V5ZC84VHY3TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: admin
  client:
    # for kubelet probes and prometheus scraping
    unauthenticated: true

---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: proxy-admin
  client:
    # for kubelet probes
    unauthenticated: true

---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: ae930acf3edba3cbf32c43dacfa4808bf679c5c932870cb2a2a46de1023f01c8
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: metrics-api
  client:
    meshTLS:
      serviceAccounts:
      - name: web
      - name: prometheus
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.30.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 8968ff419b471a71335361f923d5c7a50a36a70e206f9821cbde17d1de67e29b
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: tap-api
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRQ0J1aHkrSE5kcjI0N08wVnB6TGphakFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURNeQpPVEl3TkRNek9Gb1hEVEl6TURNeU9USXdORE16T0Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUxyYVJxZVhVdm15SEhVa203VGVMVWRKSkYzSEtmSXpzUlc5eFlRWXF2UnlGVUlyS3hqZmtiaW0xOG95Tk1FVApvcEI5OTZFeXNUdDFrWmRVeUg0YzI3MGxrYUxjMzdBZ1NZV0c4YWQ5dFRYajNBL1p2UzRGUGF0SDJWcWxzTUY5CmZPMnlzS0FkeDRkSDh0NnVUaXFVaXE3YjZpbW9ScFRaaUtBMndxQ2lxVkVMTy9xVGhzSTREMk9UOGFMQ0VsSDMKS3hGWTNobVNDMnJYeExFRHhFYktndmlIZGhFeitEb3FTa2thWFZaYzhJdGc5MGxuWnpRMjlYRktTNWZEOW5WZQpDNEE4WXc2dXVRWDU3Vm12aXZOQkZpRVQ2cEVKOHN4SThpVmZFRlBxMmNrckNiNjE5ZFZ5SFlCRTRLZUg3TUl2CmpIYy8zL3lJYmdicEJwOFlzT1o2Z2ZNQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBQWVoSGgvcU14TlVGM2diQjh5bVhpRjNqY2VRMGNJWHYwbDdDYWVkaFdRLy9Gb3hNN2Vab2hMd0ZYZzkKOFNJQWdWTXV5cEc4U1NWVDNGODAxYzRPd1JNUm4rUDlEMG1FdVpLMkJZRHpSMjQ5Szl3K2ZEU1ZKMEFCRlBlQwpGT3NqMlpRMEEwd1djMFlBdVlENzJUaHNFVjV4SEhwVUFKUmNGWWpaSUdRSUswRVFVbEdoMUYxam1aUHNsa25HCkpYNlIyT1pMVTJBazlpZDdPYTdLSnpDaGNqd3RUVUhhVWlJMzhmbnJZUnpwN3lHa0t2ZWZoUy8zeTc0anlVb1UKa0EvZ1psckcrQjU5K1pQWjYrR2FEd1A0cVFtK3hZU1A2SWFmSFNKd21ITFFZZUYrRGljNXJFTnEwWmE0SXlvUwp4U0N3bVcybElMNURKNTUrZm0zbFVScFo4L1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdXRwR3A1ZFMrYkljZFNTYnRONHRSMGtrWGNjcDhqT3hGYjNGaEJpcTlISVZRaXNyCkdOK1J1S2JYeWpJMHdST2lrSDMzb1RLeE8zV1JsMVRJZmh6YnZTV1JvdHpmc0NCSmhZYnhwMzIxTmVQY0Q5bTkKTGdVOXEwZlpXcVd3d1gxODdiS3dvQjNIaDBmeTNxNU9LcFNLcnR2cUthaEdsTm1Jb0RiQ29LS3BVUXM3K3BPRwp3amdQWTVQeG9zSVNVZmNyRVZqZUdaSUxhdGZFc1FQRVJzcUMrSWQyRVRQNE9pcEtTUnBkVmx6d2kyRDNTV2RuCk5EYjFjVXBMbDhQMmRWNExnRHhqRHE2NUJmbnRXYStLODBFV0lSUHFrUW55ekVqeUpWOFFVK3JaeVNzSnZyWDEKMVhJZGdFVGdwNGZzd2krTWR6L2YvSWh1QnVrR254aXc1bnFCOHdJREFRQUJBb0lCQVFDNUtpK1VTdGhXUzFQNgpIaklUTlkwbk5HdE9aMXpCQU1xL0lkVkhSMjY2V1FlS0Q5OWdnY1VWZUhrbGpVVk1CSm8zbUMwNldGTGIrbkV4Cnh6bjhCN3NXSU5IRzFCenptN3RnRUU4UFRQcXprYjkxRWJCd2w0NzZXblFoYVVyVkkvY1dVdHJIZ1Z0R1MxMTUKb01BallCcGlsOW5nT0RyaHJRVEF5Q050TG1TZHd0T21ESFJjeitkSDFJeEN4R2ExdE1uUFZwU05yRDYrQVpQQQpzRmMwWDFoYUZvcHhpdnRRNDhEeXYzRkxmTTBXLzV1MmtEaHRJd0xFVjRJYVJ5Vlg1OXduMFpMZDlrdFRaL04zCkpQRHoydWNGdFFOVDh2K2taMFlTYVhVKzN6Q0tuZ1JGNng1dmxFYkNvMWNOMDFPenppK2xjL1VkYXBYZWJEKzAKNG4wYkJ0MHBBb0dCQU9DdkxVZ2pkVThpb3FYTXBmZjV1Wk1wU3Q5N3FDcVptVE5UVnU5cTIxd1hBNCt0S2kwawpwNXFjYXo0U2IvZFNmVUxZekluVWlheVdkL0VuK1NPS0h6c1ZBcFZDWk5Mcm9OalFLNEpiVU5HblRRd1lzQ1JpCjA1NTVrd0dIZmUvdnptOEt5eG9YNDJSY3F5dWpOTDJwMkFxWFhwa3BIbjE5R3JNOGcrYjdONEJ0QW9HQkFOVGwKUUZLcHcrUEtQM01ybWM0UUIyTkFYbnlNWXAwaHZCRlYxcVYvNHhwWElZakYxQ0JVYitOd3NEbkZMMGk2bzR1YwpMSU9oSXZlaDljN1h2WXltK2dHQjMxdE9jRE04dUNjbVk4a01jVittNkFUM1FuWHN4cEhBYmlsZmNlTHFqTG5vCkJMOG0zQngwK0hVUWhQUjMzU1B0V3NmQ3NxWWIrS1R6d0x4aWdFL2ZBb0dBSTdUVEhtYThLdEpYUk1BTUZDZDAKaldWL2g1cVFOQXpxNHRRNHVaMml0TFRYbFFxdzdER3FEUkVVbmUyeUszekplVWtZNEVLTmlvYnpFcmtHaDlaWQpkancxaCtEZ1F3QzlOQmVKQXBOZWVhTDd4Sk5iMHJ4OTR1NXhKVW9TQW9KNnJQenJILzl4M0s0NWFacnJNOFQ5CkYxbk01OHc0RXp0QmRnQ0UrYjBzcWRVQ2dZQVpiZGlsQndvUzUxRjAzRHhlMUtOTlE1OEZtVzhkL2EyTkZJZXkKOVBlWGFkamprVjJwRHV6ZWFkTmkweDYydlRSVHRLL01lUzdJRFZ4aS9IbnpsdTQ5eDlsNStvQ0VYamhRMU5FTwpicUlNSHMrUDZFalQ5Umd5eUoxZjY3cWF0QkZqRTBlZDNYSmxJOE9abUFPSmY5ZTJOdCtsQktoNkZ0VTRQclZDCnl6RXdXUUtCZ0RHNnM0TWZ5K0JoMlBTcCtWck8yNWozNkJkSW5xU040YUoxcWVINkpHS2hVQzYvKzRnSG55clIKMWJnWGdUTHBzVklWd2lxMk9TR2tWbkJaZFZib2FqVmpvdmRLNVFIRmZHREc1WC8rQVYxVngxaFk3UE0renBEOApHRW9TOVhNL0toR0RhVkd2TWYvN1RFZEUwbExjOHQyZ1QwSDBDN1lqV0ZMQ1U2akpvNC9hCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRQ0J1aHkrSE5kcjI0N08wVnB6TGphakFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURNeQpPVEl3TkRNek9Gb1hEVEl6TURNeU9USXdORE16T0Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUxyYVJxZVhVdm15SEhVa203VGVMVWRKSkYzSEtmSXpzUlc5eFlRWXF2UnlGVUlyS3hqZmtiaW0xOG95Tk1FVApvcEI5OTZFeXNUdDFrWmRVeUg0YzI3MGxrYUxjMzdBZ1NZV0c4YWQ5dFRYajNBL1p2UzRGUGF0SDJWcWxzTUY5CmZPMnlzS0FkeDRkSDh0NnVUaXFVaXE3YjZpbW9ScFRaaUtBMndxQ2lxVkVMTy9xVGhzSTREMk9UOGFMQ0VsSDMKS3hGWTNobVNDMnJYeExFRHhFYktndmlIZGhFeitEb3FTa2thWFZaYzhJdGc5MGxuWnpRMjlYRktTNWZEOW5WZQpDNEE4WXc2dXVRWDU3Vm12aXZOQkZpRVQ2cEVKOHN4SThpVmZFRlBxMmNrckNiNjE5ZFZ5SFlCRTRLZUg3TUl2CmpIYy8zL3lJYmdicEJwOFlzT1o2Z2ZNQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBQWVoSGgvcU14TlVGM2diQjh5bVhpRjNqY2VRMGNJWHYwbDdDYWVkaFdRLy9Gb3hNN2Vab2hMd0ZYZzkKOFNJQWdWTXV5cEc4U1NWVDNGODAxYzRPd1JNUm4rUDlEMG1FdVpLMkJZRHpSMjQ5Szl3K2ZEU1ZKMEFCRlBlQwpGT3NqMlpRMEEwd1djMFlBdVlENzJUaHNFVjV4SEhwVUFKUmNGWWpaSUdRSUswRVFVbEdoMUYxam1aUHNsa25HCkpYNlIyT1pMVTJBazlpZDdPYTdLSnpDaGNqd3RUVUhhVWlJMzhmbnJZUnpwN3lHa0t2ZWZoUy8zeTc0anlVb1UKa0EvZ1psckcrQjU5K1pQWjYrR2FEd1A0cVFtK3hZU1A2SWFmSFNKd21ITFFZZUYrRGljNXJFTnEwWmE0SXlvUwp4U0N3bVcybElMNURKNTUrZm0zbFVScFo4L1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 99c4e0650a14c601766275b94b9573bf77fb393c3e7499b61eff1ac901ad592f
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: tap-injector-webhook
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
