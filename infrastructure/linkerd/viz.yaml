---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRYjVCWURaNVVCbU9pOUdpTHRRVzNZekFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURReE5URXpNVGd4TkZvWApEVEl6TURReE5URXpNVGd4TkZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBT2RRVHlsYk5SN1lScWlxT3ZMVWZqbm0KMm5TcDU1ZGZIMXBCTW9LcjZyTGkxU3lCNHVKdUFSbFZUc0M2bC9oNnRNdjN2VXFYRFVNZUdmY1liWkVqd0pZNAplQ094MHFRcHV0V3BNTDFraDNVbjFic3pXSjdDSEJlQmk5N3l4RC9VaVhuZ0VnYkw3QjU1L25DaDlFZWlwbCtHCm14Tld1NFI2d1NDKzBUNHV5c05FQmlMN1A0cy9VODlNSE9wWTkvYjlBQ0Noc25ZSEdBeXphOFprYnNOcXMrWFoKZCtqdkR0d2o3WEZMWE9RQU5MQ2MzS1ZENCt0UlVIZzN2RFJSa25ySHhSRksvMGgrZjBNN0dMbWZyTmFDMVVDNwpOODErVTFFOU9jbjFUK01kUU1TcW9QSld1aVE5S1BBVzRYL245QXhaTnhGT0FlbGloUFU1clduVTFHODRpN0VDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGLzdrWXdMQ0ppSmhzSDNZSlNsTXJJNkU3Y2F0QTBNCkc1akFKbVlHRDRQR2ltcE5jVXBZL3dxMFo5b2VjaWdnMFZySDZUOW9ES3Z3NzdkTC92R01GT3djTHhITE5IcHgKK1dwNDhvYlpPK1VFaXBwT3VHVWFjYXpxYUMzSy9yaUJDRzZNNHYzRS9VOEwyY3RGcXF2S3kraHZhc1ZaVFZjKwpWN29RdnVhL01uSjk0RldnT2FMa09xeWF1MjVEd2Z2QnpxQ293T2dkT3NEVmR4elh3K0llcnRFUmtmWjZzOWsrClBNU0ZTZGVrT09DaXVkeHFuekt3RGlFblYvdkJub1JQTkc2VFR1bmcrZE8xVUQvbytVdWY1cE1BNU1HM0pQOGIKcXVoU1ZYYVBNTjhwQmxqRU9PVng0NS9JaDJhYXZWRXZGblVPWm9iM3RKR1NoZDJlc3J0VmlnND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNTFCUEtWczFIdGhHcUtvNjh0UitPZWJhZEtubmwxOGZXa0V5Z3F2cXN1TFZMSUhpCjRtNEJHVlZPd0xxWCtIcTB5L2U5U3BjTlF4NFo5eGh0a1NQQWxqaDRJN0hTcENtNjFha3d2V1NIZFNmVnV6TlkKbnNJY0Y0R0wzdkxFUDlTSmVlQVNCc3ZzSG5uK2NLSDBSNkttWDRhYkUxYTdoSHJCSUw3UlBpN0t3MFFHSXZzLwppejlUejB3YzZsajM5djBBSUtHeWRnY1lETE5yeG1SdXcycXo1ZGwzNk84TzNDUHRjVXRjNUFBMHNKemNwVVBqCjYxRlFlRGU4TkZHU2VzZkZFVXIvU0g1L1F6c1l1WitzMW9MVlFMczN6WDVUVVQwNXlmVlA0eDFBeEtxZzhsYTYKSkQwbzhCYmhmK2YwREZrM0VVNEI2V0tFOVRtdGFkVFViemlMc1FJREFRQUJBb0lCQVFDSW9LRUJkb1FiNGZkcQpiSkpCR0U0dWVUTVRzYisvWTBvcmoxTDhaL3RMQ2p5TCszUTk5bWZqeE1XdGhRbDZsVS94SWpYR3R3MzRWUEZWClNESi9oalNkQm1IQUE2cTltSUJvNzNTQWliNlE3cVNKM0R3K0diMXFEUFRIRFhIcG1lcFIrSTN0UWNvSC9sclIKd0hkL1VJMGc0MnI1czBNemJ5WmY1eFhFdXZLOC9uTlFybGlITzhUYWd5YXkxT3BkNGtpbmVLbld2VlBlUXFpNQpDNkJsWVJwMHVjQlVsMk8vVHVqcDdoY2V3U0RHTXUzeXIrczRLeGVIaDFVUUlyWU5FOVpJNWxRSXYzdFJ1QWxtCjVWazBkRmlzQVRIWWtZbjlPRWpncG5ycTJnS2RQY2hmSkhwdlFWYjIwdkpOQlByMjV5ZURyYTF1QWI3RGcxTzAKcTllYStXZ0JBb0dCQU9xdzJrVWU3TFhQTEs0WmpZejl0K1I5dVVVS2RIdHhwQVVmeHgrTkhkOVZxNkpUeDE5eQpYZEx3TWdvTFJYckpwUjF3VGZ2Q3JLUWpKZlJmTmhMVDlld3Q2WUk1UnZrSVh0a09aUkwzamdjTGF0SWNZMlZ3ClJDMVV5Tm5NQnc5amlQT1ZweDByMUhWRTNUb2dja3FKSjRITVdkNE8zMjU5cUNYZkhEQW1uZjl4QW9HQkFQeFEKOVhmVHI3RWZ6T1Fpb1Q1aHR6eUJoMUtXWkgvOGRRQTU4VnJLdTFvK3dVYm56ME53cjk1RDF4Q2FPQlBPdlJsdwo1QmRnZ3BxREZEWGF2bEQ1L1RIaWhGeGJOT2V3UUJOSm9BeE84dEJteTZTdG9YUHN5RWdkMUdvNitqamxwVkxjCkhrVHpDbDViUWc3MnFEbzJOdjcyVTc5Y092aXk4Ujk1c0QyMHpiQkJBb0dBYWEvMHkxWE8wVjBYeU50WEJGd3AKbU9zSktNODVmM0hBcEZJWU1Od3l6S1ZlNG40SjliQ2lFZUQ3Rjh6Vm9DTDRpVlpPdUFhR0NuQ05vZ3ZTWlE0dwozQWdjOVBqb1BqT0h5d1dSZk1ZZ25vbUV0RlAyYXZMd3NOMVNpY280ajdTS011OTh6MFV5cXhDMDgzMHpHdC9DCis4L1QxSTBzRHl6bE1SRFZOOVhjSnZFQ2dZRUE0S2QwNSt3alVxSHQzSEs0L3NJaVZFMUFIOWlvUXd5VllFNDMKQjQvYW9NK2ZaM0tlcUgxOUdYbHQwK3A4WTZaLzJGY2J2M1MrMUxSQkduSlpZZUEwQUdhZlUxd2lEdWh2SkwwNQpNN3hYbGhidzJ2OTk4YW14NmdRbFRUQ1YrbkwrY0hoc3V4ZHE4L2h0S01XVm83OEIyS0dhajVlZktqQ3BZRTBKCkR1Z2MvQUVDZ1lCdE1aMm1PVmN3dzJRWGdNTE1lcWYrdVhaY2VhMHhyeklScUNLWG1QdkEvc1M1UTh1cE5iZDEKcmxxVnBKZHlVcmZoMUFPYk50eVVMY2FpbEh1VHlNUktWZStsNHk5WU94bHZpb3VNeDBCSkdPSjlQejZ2aUhIQwp5SUJpZU9DZnJ4Qmhma3dQU1lNTlBaM3Z5NWxSQW9ZeWlSM1RxclYycXIxVXBOcmVjQThoZVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRYjVCWURaNVVCbU9pOUdpTHRRVzNZekFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURReE5URXpNVGd4TkZvWApEVEl6TURReE5URXpNVGd4TkZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBT2RRVHlsYk5SN1lScWlxT3ZMVWZqbm0KMm5TcDU1ZGZIMXBCTW9LcjZyTGkxU3lCNHVKdUFSbFZUc0M2bC9oNnRNdjN2VXFYRFVNZUdmY1liWkVqd0pZNAplQ094MHFRcHV0V3BNTDFraDNVbjFic3pXSjdDSEJlQmk5N3l4RC9VaVhuZ0VnYkw3QjU1L25DaDlFZWlwbCtHCm14Tld1NFI2d1NDKzBUNHV5c05FQmlMN1A0cy9VODlNSE9wWTkvYjlBQ0Noc25ZSEdBeXphOFprYnNOcXMrWFoKZCtqdkR0d2o3WEZMWE9RQU5MQ2MzS1ZENCt0UlVIZzN2RFJSa25ySHhSRksvMGgrZjBNN0dMbWZyTmFDMVVDNwpOODErVTFFOU9jbjFUK01kUU1TcW9QSld1aVE5S1BBVzRYL245QXhaTnhGT0FlbGloUFU1clduVTFHODRpN0VDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGLzdrWXdMQ0ppSmhzSDNZSlNsTXJJNkU3Y2F0QTBNCkc1akFKbVlHRDRQR2ltcE5jVXBZL3dxMFo5b2VjaWdnMFZySDZUOW9ES3Z3NzdkTC92R01GT3djTHhITE5IcHgKK1dwNDhvYlpPK1VFaXBwT3VHVWFjYXpxYUMzSy9yaUJDRzZNNHYzRS9VOEwyY3RGcXF2S3kraHZhc1ZaVFZjKwpWN29RdnVhL01uSjk0RldnT2FMa09xeWF1MjVEd2Z2QnpxQ293T2dkT3NEVmR4elh3K0llcnRFUmtmWjZzOWsrClBNU0ZTZGVrT09DaXVkeHFuekt3RGlFblYvdkJub1JQTkc2VFR1bmcrZE8xVUQvbytVdWY1cE1BNU1HM0pQOGIKcXVoU1ZYYVBNTjhwQmxqRU9PVng0NS9JaDJhYXZWRXZGblVPWm9iM3RKR1NoZDJlc3J0VmlnND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: admin
  client:
    # for kubelet probes and prometheus scraping
    unauthenticated: true

---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: proxy-admin
  client:
    # for kubelet probes
    unauthenticated: true

---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: ae930acf3edba3cbf32c43dacfa4808bf679c5c932870cb2a2a46de1023f01c8
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: metrics-api
  client:
    meshTLS:
      serviceAccounts:
      - name: web
      - name: prometheus
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.30.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: ab58bd8ef33ae779abfb326e8acfb3ec221ba41ead559e897fbb525f1c4569b2
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: tap-api
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRYVUrYURDNmovQ1J2d1JZNnl6WDF3ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURReApOVEV6TVRneE5Gb1hEVEl6TURReE5URXpNVGd4TkZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUphWEZ1TFgwYm55b01WQ2M1VGxBdnpZSXVkSVhOMGNOdGQ5b09uWThRM1NDSG1UckJGbWltTzBLcEZoYVJ6bAp2YTBVanA1ekJVQ0s4djZSZSthbGUzSWh5ektLNE8wc1VMdkxJRmhPQ1NnMkZWN3drOUNhSTA2QXVqbkRJdFRKCklTbTBza3VQYi95aFlWcTNZcHdVYlZ0aDhrTVRrUGNHU0JSN2o0RVh4YkFLVjQvRy9PcWpJeTRGVGpYdEtpMU8KR3E3SDkwWlJsZHFGYXhMRnd3UGN4VTVrTnBkL01TNFFwamtrRmlVaUlxdXVuWGljZXhMR2ZZWDlrNTB4ZDJRSQpJRFl4RlNzeU1vcHlXUHA5bHpORXp5VFo4c2ZLcWVCOHREY3dFWHNmeDVyRW9GVitwT1FBaW5oZmQ4NGk2cFk3CkxhQVNGQTNXQ0VRcXJYSDlrYyt1b0NNQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSEFtanFKMVVmdEFOQk0reWlBQmJaWldnLzM0d3Rvc2xsQ2Y3Q2oxby9JYy93Wk9GSlRBVWVnWkNTNU4KS25MUTZFNmxXNGovaXpXZUJPNVZyODVPVlc1Uk5BN0RFSzhZZWZCUW1NUGtFRkUvR3lTWHo3T3BQL2JoZ2p4UgpxWkJlalB0VzR4aHU2TDVlcitZa2ZrVkcwQ3ZJU2xtWVZTbExETkpIMm4vZGxvNmZwc0pBanZrMDIvdDcyT3AvCllaQ0U3QkZNZEgrR0dvZjFkd1pTMmptbEZZS1VvVmlzekJmVDVqNWx5d3h4NzIyRUkwOTRVQ2p1RS8rMXBmQVYKSVRxVTlPKzYzNE9lTG1rTVNUaHZKU2p3UVpBTzlHaStEVTZoZEdIT0VhVjhoVXdIZnMrdDhUb1dHSTdXVG0xaQpNZ2hzMDMzNEZuSnVhcVFoTWh1MFJsSkxYY0k9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbHBjVzR0ZlJ1ZktneFVKemxPVUMvTmdpNTBoYzNSdzIxMzJnNmRqeERkSUllWk9zCkVXYUtZN1Fxa1dGcEhPVzlyUlNPbm5NRlFJcnkvcEY3NXFWN2NpSExNb3JnN1N4UXU4c2dXRTRKS0RZVlh2Q1QKMEpvalRvQzZPY01pMU1raEtiU3lTNDl2L0tGaFdyZGluQlJ0VzJIeVF4T1E5d1pJRkh1UGdSZkZzQXBYajhiOAo2cU1qTGdWT05lMHFMVTRhcnNmM1JsR1Yyb1ZyRXNYREE5ekZUbVEybDM4eExoQ21PU1FXSlNJaXE2NmRlSng3CkVzWjloZjJUblRGM1pBZ2dOakVWS3pJeWluSlkrbjJYTTBUUEpObnl4OHFwNEh5ME56QVJleC9IbXNTZ1ZYNmsKNUFDS2VGOTN6aUxxbGpzdG9CSVVEZFlJUkNxdGNmMlJ6NjZnSXdJREFRQUJBb0lCQUZLZklQSml3UEhKdWdXZwplUFBIVm9WTlBKRXl0YWltMHp3VjlGUjVMNENLclJXdlBPZnJINkNtZC9oOXZvTVpWYUVCdDJJZDcxTERLYUVjClJ5Tjd4YWdQL0lHRml2VDFySEhzZDVtYmJ4Qzk0Nm5NU3YxWHBHbHMzVC9WM1dWcjJLTWVQZmlSQVR0VmU2bWYKRmg1V1lzMlJocTdnckZlci9aNG5VTXZlTkJ0cUtiUWtIOEQ0dDVRdXFhbXRJcWkyZGFtRDRKVWk0Y2wyUGRWZApCQjR1YTMzdzZhWVo5bTVheUxHWDNreWtWQ3ZDV1B5L0s4bVlNaVB5SGJkR0xjWGpIZFpDc3VoOVM5djJ3b3BxClZKVktRYU1halhsQVo5U2daK3F1Tlcvb25wNDN1S2xYNFMwRkVTWXFja3NNS0JCUjNYY3JIbzJGaVZUYm55eG0KME42U2pqRUNnWUVBd0k2S2xJQVh4Z0x3d1QvSEZLVDdPQlpOYXN1UXZnS1ljOEFOQWV5ckJGcWN5VjlHM2E1NApoUXlzaFlYejhtaUx0dlhNZUhPYUx0cjhJREJFTytjT295MGpFQjBQSVhkVG0xYUM3Nmd2UGdqRjhSOEdyMlNyCjNIU3FVUjU0TWN5NHhFbndNNFFSRHJHaWw2L3VDZDRUaldHbnBZMTllbUZ1cEtTNEtMbDg4QnNDZ1lFQXlEVFIKblVrb084NTFvTEFEenRKUy94TUN0QjFESjJ5UHlGQ3NIUTkxYUJqT0pMTDQyZHVIUDZac0M5RGthTWJ4K0JpRAorN0l3ajBHUnlEbDFzWloveWFXWTJBc3VUbHZGZHQ3TlkxR1lNT0RldlpOa3NGNUVpRjVRSUNtaWs0cS8wcXNMCjBwMTdtbnRIcGRHdWhkT3plbU41N3RzNFZQZjYwbkdEZkFkN1lKa0NnWUJNMWRRWWM1Q0k4ODFyMzI0cUg3Y2EKNTFOWEJRbXB1RkZyQnJ4cUF5MHVuSldwaVBvM0pSSjBUTjFlbmxmOFo1a3dsWjVVaGhTRkU5NjlYV1VzM2dNcQpPNjJkRld0Zk9FVkZXOXo5a29mZlloTFNKMFk4b0pndmJPSTFZa29sM1FIeFdXdWVzdGszbXN3OWFQYzhPc0JrCmp3NGRjbnNhWlZ5SUdDNWdHYnZ2OXdLQmdFZGl6ZnNQUXRGUVpKRFBNZ3hrNGtNaFBDMk00WTBGSUorRVpGcFkKVUx5MVc0dXFaU0VKTGNoOFJycFAyYUdpamxTd0tSOXVBZktTcHJDR0RIa3QrSkttQVVISGV0TmwxWnIxQnJjTApPUUQwclhkYlB1UEVPUnVHeFhzeVhVM09nMmRTcGZ5TE9xOXlsYkdDZW9BdFpDbVhucnFVWUJtcjhqdG5Ua0xEClNETEJBb0dBRWZKakZGVlRBelF5WDNOUDdrdkdDTEh0NGJzS1V5M3lhdHh6eW1GSEpsM3FGdTlHaUhoL3ZnZS8KN3dET3B0UmJuRStlUjJZUjZ6dkxCT01BMmdBZlFNejJhVEttbDQyOVZ4SkxhUS93TFpWS0ZBMWVudzZObTRzdApsWFM2UnRMbkZEbHQvclJkYmc4ejk0UkZzSWNRNEN6V0w0cUd5RUs2dXBudjgxZW8rSGc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRYVUrYURDNmovQ1J2d1JZNnl6WDF3ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURReApOVEV6TVRneE5Gb1hEVEl6TURReE5URXpNVGd4TkZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUphWEZ1TFgwYm55b01WQ2M1VGxBdnpZSXVkSVhOMGNOdGQ5b09uWThRM1NDSG1UckJGbWltTzBLcEZoYVJ6bAp2YTBVanA1ekJVQ0s4djZSZSthbGUzSWh5ektLNE8wc1VMdkxJRmhPQ1NnMkZWN3drOUNhSTA2QXVqbkRJdFRKCklTbTBza3VQYi95aFlWcTNZcHdVYlZ0aDhrTVRrUGNHU0JSN2o0RVh4YkFLVjQvRy9PcWpJeTRGVGpYdEtpMU8KR3E3SDkwWlJsZHFGYXhMRnd3UGN4VTVrTnBkL01TNFFwamtrRmlVaUlxdXVuWGljZXhMR2ZZWDlrNTB4ZDJRSQpJRFl4RlNzeU1vcHlXUHA5bHpORXp5VFo4c2ZLcWVCOHREY3dFWHNmeDVyRW9GVitwT1FBaW5oZmQ4NGk2cFk3CkxhQVNGQTNXQ0VRcXJYSDlrYyt1b0NNQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSEFtanFKMVVmdEFOQk0reWlBQmJaWldnLzM0d3Rvc2xsQ2Y3Q2oxby9JYy93Wk9GSlRBVWVnWkNTNU4KS25MUTZFNmxXNGovaXpXZUJPNVZyODVPVlc1Uk5BN0RFSzhZZWZCUW1NUGtFRkUvR3lTWHo3T3BQL2JoZ2p4UgpxWkJlalB0VzR4aHU2TDVlcitZa2ZrVkcwQ3ZJU2xtWVZTbExETkpIMm4vZGxvNmZwc0pBanZrMDIvdDcyT3AvCllaQ0U3QkZNZEgrR0dvZjFkd1pTMmptbEZZS1VvVmlzekJmVDVqNWx5d3h4NzIyRUkwOTRVQ2p1RS8rMXBmQVYKSVRxVTlPKzYzNE9lTG1rTVNUaHZKU2p3UVpBTzlHaStEVTZoZEdIT0VhVjhoVXdIZnMrdDhUb1dHSTdXVG0xaQpNZ2hzMDMzNEZuSnVhcVFoTWh1MFJsSkxYY0k9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 7afc305e8e7d94d31ab89329554e01acfc857004d19875bf4d7f15036d64c33a
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
spec:
  server:
    name: tap-injector-webhook
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-22.3.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.3.4
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-22.3.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:edge-22.3.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
